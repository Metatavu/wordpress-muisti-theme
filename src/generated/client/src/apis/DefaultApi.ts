// tslint:disable
/**
 * localhost:1234
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Attachment,
    AttachmentFromJSON,
    AttachmentToJSON,
    Category,
    CategoryFromJSON,
    CategoryToJSON,
    Comment,
    CommentFromJSON,
    CommentToJSON,
    Menu,
    MenuFromJSON,
    MenuToJSON,
    MenuData,
    MenuDataFromJSON,
    MenuDataToJSON,
    MenuLocation,
    MenuLocationFromJSON,
    MenuLocationToJSON,
    MenuLocationData,
    MenuLocationDataFromJSON,
    MenuLocationDataToJSON,
    Page,
    PageFromJSON,
    PageToJSON,
    PageRevision,
    PageRevisionFromJSON,
    PageRevisionToJSON,
    Post,
    PostFromJSON,
    PostToJSON,
    PostRevision,
    PostRevisionFromJSON,
    PostRevisionToJSON,
    RenderedBlock,
    RenderedBlockFromJSON,
    RenderedBlockToJSON,
    SearchResult,
    SearchResultFromJSON,
    SearchResultToJSON,
    Settings,
    SettingsFromJSON,
    SettingsToJSON,
    Status,
    StatusFromJSON,
    StatusToJSON,
    Tag,
    TagFromJSON,
    TagToJSON,
    Taxonomy,
    TaxonomyFromJSON,
    TaxonomyToJSON,
    Theme,
    ThemeFromJSON,
    ThemeToJSON,
    Type,
    TypeFromJSON,
    TypeToJSON,
    User,
    UserFromJSON,
    UserToJSON,
    WpBlock,
    WpBlockFromJSON,
    WpBlockToJSON,
    WpBlockRevision,
    WpBlockRevisionFromJSON,
    WpBlockRevisionToJSON,
} from '../models';

export interface DeleteWpV2BlocksByIdRequest {
    id: string;
    force?: boolean;
}

export interface DeleteWpV2CategoriesByIdRequest {
    id: string;
    force?: boolean;
}

export interface DeleteWpV2CommentsByIdRequest {
    id: string;
    force?: boolean;
    password?: string;
}

export interface DeleteWpV2MediaByIdRequest {
    id: string;
    force?: boolean;
}

export interface DeleteWpV2PagesByIdRequest {
    id: string;
    force?: boolean;
}

export interface DeleteWpV2PagesByParentRevisionsByIdRequest {
    parent: string;
    id: string;
    parent2?: number;
    force?: boolean;
}

export interface DeleteWpV2PostsByIdRequest {
    id: string;
    force?: boolean;
}

export interface DeleteWpV2PostsByParentRevisionsByIdRequest {
    parent: string;
    id: string;
    parent2?: number;
    force?: boolean;
}

export interface DeleteWpV2TagsByIdRequest {
    id: string;
    force?: boolean;
}

export interface DeleteWpV2UsersByIdRequest {
    id: string;
    reassign: number;
    force?: boolean;
}

export interface DeleteWpV2UsersMeRequest {
    reassign: number;
    force?: boolean;
}

export interface GetMenusV1LocationsByIdRequest {
    id: string;
}

export interface GetMenusV1MenusByIdRequest {
    id: string;
}

export interface GetWpV2BlockRendererByNameRequest {
    name: string;
    name2?: string;
    context?: GetWpV2BlockRendererByNameContextEnum;
    attributes?: string;
    post_id?: number;
}

export interface GetWpV2BlocksRequest {
    context?: GetWpV2BlocksContextEnum;
    page?: number;
    per_page?: number;
    search?: string;
    after?: Date;
    before?: Date;
    exclude?: Array<string>;
    include?: Array<string>;
    offset?: number;
    order?: GetWpV2BlocksOrderEnum;
    orderby?: GetWpV2BlocksOrderbyEnum;
    slug?: Array<string>;
    status?: string;
}

export interface GetWpV2BlocksByIdRequest {
    id: string;
    context?: GetWpV2BlocksByIdContextEnum;
    password?: string;
}

export interface GetWpV2BlocksByIdAutosavesRequest {
    id: string;
    parent?: number;
    context?: GetWpV2BlocksByIdAutosavesContextEnum;
}

export interface GetWpV2BlocksByParentAutosavesByIdRequest {
    parent: string;
    id: string;
    parent2?: number;
    context?: GetWpV2BlocksByParentAutosavesByIdContextEnum;
}

export interface GetWpV2CategoriesRequest {
    context?: GetWpV2CategoriesContextEnum;
    page?: number;
    per_page?: number;
    search?: string;
    exclude?: Array<string>;
    include?: Array<string>;
    order?: GetWpV2CategoriesOrderEnum;
    orderby?: GetWpV2CategoriesOrderbyEnum;
    hide_empty?: boolean;
    parent?: number;
    post?: number;
    slug?: Array<string>;
}

export interface GetWpV2CategoriesByIdRequest {
    id: string;
    context?: GetWpV2CategoriesByIdContextEnum;
}

export interface GetWpV2CommentsRequest {
    context?: GetWpV2CommentsContextEnum;
    page?: number;
    per_page?: number;
    search?: string;
    after?: Date;
    author?: Array<string>;
    author_exclude?: Array<string>;
    author_email?: string;
    before?: Date;
    exclude?: Array<string>;
    include?: Array<string>;
    offset?: number;
    order?: GetWpV2CommentsOrderEnum;
    orderby?: GetWpV2CommentsOrderbyEnum;
    parent?: Array<string>;
    parent_exclude?: Array<string>;
    post?: Array<string>;
    status?: string;
    type?: string;
    password?: string;
}

export interface GetWpV2CommentsByIdRequest {
    id: string;
    context?: GetWpV2CommentsByIdContextEnum;
    password?: string;
}

export interface GetWpV2MediaRequest {
    context?: GetWpV2MediaContextEnum;
    page?: number;
    per_page?: number;
    search?: string;
    after?: Date;
    author?: Array<string>;
    author_exclude?: Array<string>;
    before?: Date;
    exclude?: Array<string>;
    include?: Array<string>;
    offset?: number;
    order?: GetWpV2MediaOrderEnum;
    orderby?: GetWpV2MediaOrderbyEnum;
    parent?: Array<string>;
    parent_exclude?: Array<string>;
    slug?: Array<string>;
    status?: string;
    media_type?: GetWpV2MediaMediaTypeEnum;
    mime_type?: string;
}

export interface GetWpV2MediaByIdRequest {
    id: string;
    context?: GetWpV2MediaByIdContextEnum;
}

export interface GetWpV2PagesRequest {
    context?: GetWpV2PagesContextEnum;
    page?: number;
    per_page?: number;
    search?: string;
    after?: Date;
    author?: Array<string>;
    author_exclude?: Array<string>;
    before?: Date;
    exclude?: Array<string>;
    include?: Array<string>;
    menu_order?: number;
    offset?: number;
    order?: GetWpV2PagesOrderEnum;
    orderby?: GetWpV2PagesOrderbyEnum;
    parent?: Array<string>;
    parent_exclude?: Array<string>;
    slug?: Array<string>;
    status?: string;
}

export interface GetWpV2PagesByIdRequest {
    id: string;
    context?: GetWpV2PagesByIdContextEnum;
    password?: string;
}

export interface GetWpV2PagesByIdAutosavesRequest {
    id: string;
    parent?: number;
    context?: GetWpV2PagesByIdAutosavesContextEnum;
}

export interface GetWpV2PagesByParentAutosavesByIdRequest {
    parent: string;
    id: string;
    parent2?: number;
    context?: GetWpV2PagesByParentAutosavesByIdContextEnum;
}

export interface GetWpV2PagesByParentRevisionsRequest {
    parent: string;
    parent2?: number;
    context?: GetWpV2PagesByParentRevisionsContextEnum;
    page?: number;
    per_page?: number;
    search?: string;
    exclude?: Array<string>;
    include?: Array<string>;
    offset?: number;
    order?: GetWpV2PagesByParentRevisionsOrderEnum;
    orderby?: GetWpV2PagesByParentRevisionsOrderbyEnum;
}

export interface GetWpV2PagesByParentRevisionsByIdRequest {
    parent: string;
    id: string;
    parent2?: number;
    context?: GetWpV2PagesByParentRevisionsByIdContextEnum;
}

export interface GetWpV2PostsRequest {
    context?: GetWpV2PostsContextEnum;
    page?: number;
    per_page?: number;
    search?: string;
    after?: Date;
    author?: Array<string>;
    author_exclude?: Array<string>;
    before?: Date;
    exclude?: Array<string>;
    include?: Array<string>;
    offset?: number;
    order?: GetWpV2PostsOrderEnum;
    orderby?: GetWpV2PostsOrderbyEnum;
    slug?: Array<string>;
    status?: string;
    categories?: Array<string>;
    categories_exclude?: Array<string>;
    tags?: Array<string>;
    tags_exclude?: Array<string>;
    sticky?: boolean;
}

export interface GetWpV2PostsByIdRequest {
    id: string;
    context?: GetWpV2PostsByIdContextEnum;
    password?: string;
}

export interface GetWpV2PostsByIdAutosavesRequest {
    id: string;
    parent?: number;
    context?: GetWpV2PostsByIdAutosavesContextEnum;
}

export interface GetWpV2PostsByParentAutosavesByIdRequest {
    parent: string;
    id: string;
    parent2?: number;
    context?: GetWpV2PostsByParentAutosavesByIdContextEnum;
}

export interface GetWpV2PostsByParentRevisionsRequest {
    parent: string;
    parent2?: number;
    context?: GetWpV2PostsByParentRevisionsContextEnum;
    page?: number;
    per_page?: number;
    search?: string;
    exclude?: Array<string>;
    include?: Array<string>;
    offset?: number;
    order?: GetWpV2PostsByParentRevisionsOrderEnum;
    orderby?: GetWpV2PostsByParentRevisionsOrderbyEnum;
}

export interface GetWpV2PostsByParentRevisionsByIdRequest {
    parent: string;
    id: string;
    parent2?: number;
    context?: GetWpV2PostsByParentRevisionsByIdContextEnum;
}

export interface GetWpV2SearchRequest {
    context?: GetWpV2SearchContextEnum;
    page?: number;
    per_page?: number;
    search?: string;
    type?: GetWpV2SearchTypeEnum;
    subtype?: string;
}

export interface GetWpV2StatusesRequest {
    context?: GetWpV2StatusesContextEnum;
}

export interface GetWpV2StatusesByStatusRequest {
    status: string;
    status2?: string;
    context?: GetWpV2StatusesByStatusContextEnum;
}

export interface GetWpV2TagsRequest {
    context?: GetWpV2TagsContextEnum;
    page?: number;
    per_page?: number;
    search?: string;
    exclude?: Array<string>;
    include?: Array<string>;
    offset?: number;
    order?: GetWpV2TagsOrderEnum;
    orderby?: GetWpV2TagsOrderbyEnum;
    hide_empty?: boolean;
    post?: number;
    slug?: Array<string>;
}

export interface GetWpV2TagsByIdRequest {
    id: string;
    context?: GetWpV2TagsByIdContextEnum;
}

export interface GetWpV2TaxonomiesRequest {
    context?: GetWpV2TaxonomiesContextEnum;
    type?: string;
}

export interface GetWpV2TaxonomiesByTaxonomyRequest {
    taxonomy: string;
    taxonomy2?: string;
    context?: GetWpV2TaxonomiesByTaxonomyContextEnum;
}

export interface GetWpV2ThemesRequest {
    status: Array<string>;
    context?: string;
    page?: number;
    per_page?: number;
    search?: string;
}

export interface GetWpV2TypesRequest {
    context?: GetWpV2TypesContextEnum;
}

export interface GetWpV2TypesByTypeRequest {
    type: string;
    type2?: string;
    context?: GetWpV2TypesByTypeContextEnum;
}

export interface GetWpV2UsersRequest {
    context?: GetWpV2UsersContextEnum;
    page?: number;
    per_page?: number;
    search?: string;
    exclude?: Array<string>;
    include?: Array<string>;
    offset?: number;
    order?: GetWpV2UsersOrderEnum;
    orderby?: GetWpV2UsersOrderbyEnum;
    slug?: Array<string>;
    roles?: Array<string>;
    who?: GetWpV2UsersWhoEnum;
}

export interface GetWpV2UsersByIdRequest {
    id: string;
    context?: GetWpV2UsersByIdContextEnum;
}

export interface GetWpV2UsersMeRequest {
    context?: GetWpV2UsersMeContextEnum;
}

export interface PostWpV2BlocksRequest {
    date?: Date;
    date_gmt?: Date;
    slug?: string;
    status?: PostWpV2BlocksStatusEnum;
    password?: string;
    title?: string;
    content?: string;
    template?: string;
}

export interface PostWpV2BlocksByIdRequest {
    id2: string;
    id?: number;
    date?: Date;
    date_gmt?: Date;
    slug?: string;
    status?: PostWpV2BlocksByIdStatusEnum;
    password?: string;
    title?: string;
    content?: string;
    template?: string;
}

export interface PostWpV2BlocksByIdAutosavesRequest {
    id: string;
    parent?: number;
    date?: Date;
    date_gmt?: Date;
    slug?: string;
    status?: PostWpV2BlocksByIdAutosavesStatusEnum;
    password?: string;
    title?: string;
    content?: string;
    template?: string;
}

export interface PostWpV2CategoriesRequest {
    name: string;
    description?: string;
    slug?: string;
    parent?: number;
    meta?: string;
}

export interface PostWpV2CategoriesByIdRequest {
    id2: string;
    id?: number;
    description?: string;
    name?: string;
    slug?: string;
    parent?: number;
    meta?: string;
}

export interface PostWpV2CommentsRequest {
    author?: number;
    author_email?: string;
    author_ip?: string;
    author_name?: string;
    author_url?: string;
    author_user_agent?: string;
    content?: string;
    date?: Date;
    date_gmt?: Date;
    parent?: number;
    post?: number;
    status?: string;
    meta?: string;
}

export interface PostWpV2CommentsByIdRequest {
    id2: string;
    id?: number;
    author?: number;
    author_email?: string;
    author_ip?: string;
    author_name?: string;
    author_url?: string;
    author_user_agent?: string;
    content?: string;
    date?: Date;
    date_gmt?: Date;
    parent?: number;
    post?: number;
    status?: string;
    meta?: string;
}

export interface PostWpV2MediaRequest {
    date?: Date;
    date_gmt?: Date;
    slug?: string;
    status?: PostWpV2MediaStatusEnum;
    title?: string;
    author?: number;
    comment_status?: PostWpV2MediaCommentStatusEnum;
    ping_status?: PostWpV2MediaPingStatusEnum;
    meta?: string;
    template?: string;
    alt_text?: string;
    caption?: string;
    description?: string;
    post?: number;
}

export interface PostWpV2MediaByIdRequest {
    id2: string;
    id?: number;
    date?: Date;
    date_gmt?: Date;
    slug?: string;
    status?: PostWpV2MediaByIdStatusEnum;
    title?: string;
    author?: number;
    comment_status?: PostWpV2MediaByIdCommentStatusEnum;
    ping_status?: PostWpV2MediaByIdPingStatusEnum;
    meta?: string;
    template?: string;
    alt_text?: string;
    caption?: string;
    description?: string;
    post?: number;
}

export interface PostWpV2PagesRequest {
    date?: Date;
    date_gmt?: Date;
    slug?: string;
    status?: PostWpV2PagesStatusEnum;
    password?: string;
    parent?: number;
    title?: string;
    content?: string;
    author?: number;
    excerpt?: string;
    featured_media?: number;
    comment_status?: PostWpV2PagesCommentStatusEnum;
    ping_status?: PostWpV2PagesPingStatusEnum;
    menu_order?: number;
    meta?: string;
    template?: string;
}

export interface PostWpV2PagesByIdRequest {
    id2: string;
    id?: number;
    date?: Date;
    date_gmt?: Date;
    slug?: string;
    status?: PostWpV2PagesByIdStatusEnum;
    password?: string;
    parent?: number;
    title?: string;
    content?: string;
    author?: number;
    excerpt?: string;
    featured_media?: number;
    comment_status?: PostWpV2PagesByIdCommentStatusEnum;
    ping_status?: PostWpV2PagesByIdPingStatusEnum;
    menu_order?: number;
    meta?: string;
    template?: string;
}

export interface PostWpV2PagesByIdAutosavesRequest {
    id: string;
    parent?: number;
    date?: Date;
    date_gmt?: Date;
    slug?: string;
    status?: PostWpV2PagesByIdAutosavesStatusEnum;
    password?: string;
    title?: string;
    content?: string;
    author?: number;
    excerpt?: string;
    featured_media?: number;
    comment_status?: PostWpV2PagesByIdAutosavesCommentStatusEnum;
    ping_status?: PostWpV2PagesByIdAutosavesPingStatusEnum;
    menu_order?: number;
    meta?: string;
    template?: string;
}

export interface PostWpV2PostsRequest {
    date?: Date;
    date_gmt?: Date;
    slug?: string;
    status?: PostWpV2PostsStatusEnum;
    password?: string;
    title?: string;
    content?: string;
    author?: number;
    excerpt?: string;
    featured_media?: number;
    comment_status?: PostWpV2PostsCommentStatusEnum;
    ping_status?: PostWpV2PostsPingStatusEnum;
    format?: PostWpV2PostsFormatEnum;
    meta?: string;
    sticky?: boolean;
    template?: string;
    categories?: string;
    tags?: string;
}

export interface PostWpV2PostsByIdRequest {
    id2: string;
    id?: number;
    date?: Date;
    date_gmt?: Date;
    slug?: string;
    status?: PostWpV2PostsByIdStatusEnum;
    password?: string;
    title?: string;
    content?: string;
    author?: number;
    excerpt?: string;
    featured_media?: number;
    comment_status?: PostWpV2PostsByIdCommentStatusEnum;
    ping_status?: PostWpV2PostsByIdPingStatusEnum;
    format?: PostWpV2PostsByIdFormatEnum;
    meta?: string;
    sticky?: boolean;
    template?: string;
    categories?: string;
    tags?: string;
}

export interface PostWpV2PostsByIdAutosavesRequest {
    id: string;
    parent?: number;
    date?: Date;
    date_gmt?: Date;
    slug?: string;
    status?: PostWpV2PostsByIdAutosavesStatusEnum;
    password?: string;
    title?: string;
    content?: string;
    author?: number;
    excerpt?: string;
    featured_media?: number;
    comment_status?: PostWpV2PostsByIdAutosavesCommentStatusEnum;
    ping_status?: PostWpV2PostsByIdAutosavesPingStatusEnum;
    format?: PostWpV2PostsByIdAutosavesFormatEnum;
    meta?: string;
    sticky?: boolean;
    template?: string;
    categories?: string;
    tags?: string;
}

export interface PostWpV2SettingsRequest {
    title?: string;
    description?: string;
    url?: string;
    email?: string;
    timezone?: string;
    date_format?: string;
    time_format?: string;
    start_of_week?: number;
    language?: string;
    use_smilies?: boolean;
    default_category?: number;
    default_post_format?: string;
    posts_per_page?: number;
    default_ping_status?: PostWpV2SettingsDefaultPingStatusEnum;
    default_comment_status?: PostWpV2SettingsDefaultCommentStatusEnum;
}

export interface PostWpV2TagsRequest {
    name: string;
    description?: string;
    slug?: string;
    meta?: string;
}

export interface PostWpV2TagsByIdRequest {
    id2: string;
    id?: number;
    description?: string;
    name?: string;
    slug?: string;
    meta?: string;
}

export interface PostWpV2UsersRequest {
    username: string;
    email: string;
    password: string;
    name?: string;
    first_name?: string;
    last_name?: string;
    url?: string;
    description?: string;
    locale?: PostWpV2UsersLocaleEnum;
    nickname?: string;
    slug?: string;
    roles?: string;
    meta?: string;
}

export interface PostWpV2UsersByIdRequest {
    id2: string;
    id?: number;
    username?: string;
    name?: string;
    first_name?: string;
    last_name?: string;
    email?: string;
    url?: string;
    description?: string;
    locale?: PostWpV2UsersByIdLocaleEnum;
    nickname?: string;
    slug?: string;
    roles?: string;
    password?: string;
    meta?: string;
}

export interface PostWpV2UsersMeRequest {
    username?: string;
    name?: string;
    first_name?: string;
    last_name?: string;
    email?: string;
    url?: string;
    description?: string;
    locale?: PostWpV2UsersMeLocaleEnum;
    nickname?: string;
    slug?: string;
    roles?: string;
    password?: string;
    meta?: string;
}

/**
 * no description
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     */
    async deleteWpV2BlocksByIdRaw(requestParameters: DeleteWpV2BlocksByIdRequest): Promise<runtime.ApiResponse<WpBlock>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteWpV2BlocksById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
        }

        const response = await this.request({
            path: `/wp/v2/blocks/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => WpBlockFromJSON(jsonValue));
    }

    /**
     */
    async deleteWpV2BlocksById(requestParameters: DeleteWpV2BlocksByIdRequest): Promise<WpBlock> {
        const response = await this.deleteWpV2BlocksByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async deleteWpV2CategoriesByIdRaw(requestParameters: DeleteWpV2CategoriesByIdRequest): Promise<runtime.ApiResponse<Category>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteWpV2CategoriesById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
        }

        const response = await this.request({
            path: `/wp/v2/categories/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CategoryFromJSON(jsonValue));
    }

    /**
     */
    async deleteWpV2CategoriesById(requestParameters: DeleteWpV2CategoriesByIdRequest): Promise<Category> {
        const response = await this.deleteWpV2CategoriesByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async deleteWpV2CommentsByIdRaw(requestParameters: DeleteWpV2CommentsByIdRequest): Promise<runtime.ApiResponse<Comment>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteWpV2CommentsById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        if (requestParameters.password !== undefined) {
            queryParameters['password'] = requestParameters.password;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
        }

        const response = await this.request({
            path: `/wp/v2/comments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CommentFromJSON(jsonValue));
    }

    /**
     */
    async deleteWpV2CommentsById(requestParameters: DeleteWpV2CommentsByIdRequest): Promise<Comment> {
        const response = await this.deleteWpV2CommentsByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async deleteWpV2MediaByIdRaw(requestParameters: DeleteWpV2MediaByIdRequest): Promise<runtime.ApiResponse<Attachment>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteWpV2MediaById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
        }

        const response = await this.request({
            path: `/wp/v2/media/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AttachmentFromJSON(jsonValue));
    }

    /**
     */
    async deleteWpV2MediaById(requestParameters: DeleteWpV2MediaByIdRequest): Promise<Attachment> {
        const response = await this.deleteWpV2MediaByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async deleteWpV2PagesByIdRaw(requestParameters: DeleteWpV2PagesByIdRequest): Promise<runtime.ApiResponse<Page>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteWpV2PagesById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
        }

        const response = await this.request({
            path: `/wp/v2/pages/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PageFromJSON(jsonValue));
    }

    /**
     */
    async deleteWpV2PagesById(requestParameters: DeleteWpV2PagesByIdRequest): Promise<Page> {
        const response = await this.deleteWpV2PagesByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async deleteWpV2PagesByParentRevisionsByIdRaw(requestParameters: DeleteWpV2PagesByParentRevisionsByIdRequest): Promise<runtime.ApiResponse<PageRevision>> {
        if (requestParameters.parent === null || requestParameters.parent === undefined) {
            throw new runtime.RequiredError('parent','Required parameter requestParameters.parent was null or undefined when calling deleteWpV2PagesByParentRevisionsById.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteWpV2PagesByParentRevisionsById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.parent2 !== undefined) {
            queryParameters['parent'] = requestParameters.parent2;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
        }

        const response = await this.request({
            path: `/wp/v2/pages/{parent}/revisions/{id}`.replace(`{${"parent"}}`, encodeURIComponent(String(requestParameters.parent))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PageRevisionFromJSON(jsonValue));
    }

    /**
     */
    async deleteWpV2PagesByParentRevisionsById(requestParameters: DeleteWpV2PagesByParentRevisionsByIdRequest): Promise<PageRevision> {
        const response = await this.deleteWpV2PagesByParentRevisionsByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async deleteWpV2PostsByIdRaw(requestParameters: DeleteWpV2PostsByIdRequest): Promise<runtime.ApiResponse<Post>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteWpV2PostsById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
        }

        const response = await this.request({
            path: `/wp/v2/posts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PostFromJSON(jsonValue));
    }

    /**
     */
    async deleteWpV2PostsById(requestParameters: DeleteWpV2PostsByIdRequest): Promise<Post> {
        const response = await this.deleteWpV2PostsByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async deleteWpV2PostsByParentRevisionsByIdRaw(requestParameters: DeleteWpV2PostsByParentRevisionsByIdRequest): Promise<runtime.ApiResponse<PostRevision>> {
        if (requestParameters.parent === null || requestParameters.parent === undefined) {
            throw new runtime.RequiredError('parent','Required parameter requestParameters.parent was null or undefined when calling deleteWpV2PostsByParentRevisionsById.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteWpV2PostsByParentRevisionsById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.parent2 !== undefined) {
            queryParameters['parent'] = requestParameters.parent2;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
        }

        const response = await this.request({
            path: `/wp/v2/posts/{parent}/revisions/{id}`.replace(`{${"parent"}}`, encodeURIComponent(String(requestParameters.parent))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PostRevisionFromJSON(jsonValue));
    }

    /**
     */
    async deleteWpV2PostsByParentRevisionsById(requestParameters: DeleteWpV2PostsByParentRevisionsByIdRequest): Promise<PostRevision> {
        const response = await this.deleteWpV2PostsByParentRevisionsByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async deleteWpV2TagsByIdRaw(requestParameters: DeleteWpV2TagsByIdRequest): Promise<runtime.ApiResponse<Tag>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteWpV2TagsById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
        }

        const response = await this.request({
            path: `/wp/v2/tags/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TagFromJSON(jsonValue));
    }

    /**
     */
    async deleteWpV2TagsById(requestParameters: DeleteWpV2TagsByIdRequest): Promise<Tag> {
        const response = await this.deleteWpV2TagsByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async deleteWpV2UsersByIdRaw(requestParameters: DeleteWpV2UsersByIdRequest): Promise<runtime.ApiResponse<User>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteWpV2UsersById.');
        }

        if (requestParameters.reassign === null || requestParameters.reassign === undefined) {
            throw new runtime.RequiredError('reassign','Required parameter requestParameters.reassign was null or undefined when calling deleteWpV2UsersById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        if (requestParameters.reassign !== undefined) {
            queryParameters['reassign'] = requestParameters.reassign;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
        }

        const response = await this.request({
            path: `/wp/v2/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     */
    async deleteWpV2UsersById(requestParameters: DeleteWpV2UsersByIdRequest): Promise<User> {
        const response = await this.deleteWpV2UsersByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async deleteWpV2UsersMeRaw(requestParameters: DeleteWpV2UsersMeRequest): Promise<runtime.ApiResponse<User>> {
        if (requestParameters.reassign === null || requestParameters.reassign === undefined) {
            throw new runtime.RequiredError('reassign','Required parameter requestParameters.reassign was null or undefined when calling deleteWpV2UsersMe.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        if (requestParameters.reassign !== undefined) {
            queryParameters['reassign'] = requestParameters.reassign;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
        }

        const response = await this.request({
            path: `/wp/v2/users/me`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     */
    async deleteWpV2UsersMe(requestParameters: DeleteWpV2UsersMeRequest): Promise<User> {
        const response = await this.deleteWpV2UsersMeRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getMenusV1LocationsRaw(): Promise<runtime.ApiResponse<Array<MenuLocation>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
        }

        const response = await this.request({
            path: `/menus/v1/locations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MenuLocationFromJSON));
    }

    /**
     */
    async getMenusV1Locations(): Promise<Array<MenuLocation>> {
        const response = await this.getMenusV1LocationsRaw();
        return await response.value();
    }

    /**
     */
    async getMenusV1LocationsByIdRaw(requestParameters: GetMenusV1LocationsByIdRequest): Promise<runtime.ApiResponse<MenuLocationData>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getMenusV1LocationsById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
        }

        const response = await this.request({
            path: `/menus/v1/locations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MenuLocationDataFromJSON(jsonValue));
    }

    /**
     */
    async getMenusV1LocationsById(requestParameters: GetMenusV1LocationsByIdRequest): Promise<MenuLocationData> {
        const response = await this.getMenusV1LocationsByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getMenusV1MenusRaw(): Promise<runtime.ApiResponse<Array<Menu>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
        }

        const response = await this.request({
            path: `/menus/v1/menus`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MenuFromJSON));
    }

    /**
     */
    async getMenusV1Menus(): Promise<Array<Menu>> {
        const response = await this.getMenusV1MenusRaw();
        return await response.value();
    }

    /**
     */
    async getMenusV1MenusByIdRaw(requestParameters: GetMenusV1MenusByIdRequest): Promise<runtime.ApiResponse<MenuData>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getMenusV1MenusById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
        }

        const response = await this.request({
            path: `/menus/v1/menus/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MenuDataFromJSON(jsonValue));
    }

    /**
     */
    async getMenusV1MenusById(requestParameters: GetMenusV1MenusByIdRequest): Promise<MenuData> {
        const response = await this.getMenusV1MenusByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getWpV2BlockRendererByNameRaw(requestParameters: GetWpV2BlockRendererByNameRequest): Promise<runtime.ApiResponse<RenderedBlock>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling getWpV2BlockRendererByName.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.name2 !== undefined) {
            queryParameters['name'] = requestParameters.name2;
        }

        if (requestParameters.context !== undefined) {
            queryParameters['context'] = requestParameters.context;
        }

        if (requestParameters.attributes !== undefined) {
            queryParameters['attributes'] = requestParameters.attributes;
        }

        if (requestParameters.post_id !== undefined) {
            queryParameters['post_id'] = requestParameters.post_id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
        }

        const response = await this.request({
            path: `/wp/v2/block-renderer/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RenderedBlockFromJSON(jsonValue));
    }

    /**
     */
    async getWpV2BlockRendererByName(requestParameters: GetWpV2BlockRendererByNameRequest): Promise<RenderedBlock> {
        const response = await this.getWpV2BlockRendererByNameRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getWpV2BlocksRaw(requestParameters: GetWpV2BlocksRequest): Promise<runtime.ApiResponse<Array<WpBlock>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.context !== undefined) {
            queryParameters['context'] = requestParameters.context;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.per_page !== undefined) {
            queryParameters['per_page'] = requestParameters.per_page;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.after !== undefined) {
            queryParameters['after'] = (requestParameters.after as any).toISOString();
        }

        if (requestParameters.before !== undefined) {
            queryParameters['before'] = (requestParameters.before as any).toISOString();
        }

        if (requestParameters.exclude) {
            queryParameters['exclude'] = requestParameters.exclude;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.order !== undefined) {
            queryParameters['order'] = requestParameters.order;
        }

        if (requestParameters.orderby !== undefined) {
            queryParameters['orderby'] = requestParameters.orderby;
        }

        if (requestParameters.slug) {
            queryParameters['slug'] = requestParameters.slug;
        }

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
        }

        const response = await this.request({
            path: `/wp/v2/blocks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(WpBlockFromJSON));
    }

    /**
     */
    async getWpV2Blocks(requestParameters: GetWpV2BlocksRequest): Promise<Array<WpBlock>> {
        const response = await this.getWpV2BlocksRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getWpV2BlocksByIdRaw(requestParameters: GetWpV2BlocksByIdRequest): Promise<runtime.ApiResponse<WpBlock>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getWpV2BlocksById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.context !== undefined) {
            queryParameters['context'] = requestParameters.context;
        }

        if (requestParameters.password !== undefined) {
            queryParameters['password'] = requestParameters.password;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
        }

        const response = await this.request({
            path: `/wp/v2/blocks/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => WpBlockFromJSON(jsonValue));
    }

    /**
     */
    async getWpV2BlocksById(requestParameters: GetWpV2BlocksByIdRequest): Promise<WpBlock> {
        const response = await this.getWpV2BlocksByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getWpV2BlocksByIdAutosavesRaw(requestParameters: GetWpV2BlocksByIdAutosavesRequest): Promise<runtime.ApiResponse<Array<WpBlockRevision>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getWpV2BlocksByIdAutosaves.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.parent !== undefined) {
            queryParameters['parent'] = requestParameters.parent;
        }

        if (requestParameters.context !== undefined) {
            queryParameters['context'] = requestParameters.context;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
        }

        const response = await this.request({
            path: `/wp/v2/blocks/{id}/autosaves`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(WpBlockRevisionFromJSON));
    }

    /**
     */
    async getWpV2BlocksByIdAutosaves(requestParameters: GetWpV2BlocksByIdAutosavesRequest): Promise<Array<WpBlockRevision>> {
        const response = await this.getWpV2BlocksByIdAutosavesRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getWpV2BlocksByParentAutosavesByIdRaw(requestParameters: GetWpV2BlocksByParentAutosavesByIdRequest): Promise<runtime.ApiResponse<WpBlockRevision>> {
        if (requestParameters.parent === null || requestParameters.parent === undefined) {
            throw new runtime.RequiredError('parent','Required parameter requestParameters.parent was null or undefined when calling getWpV2BlocksByParentAutosavesById.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getWpV2BlocksByParentAutosavesById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.parent2 !== undefined) {
            queryParameters['parent'] = requestParameters.parent2;
        }

        if (requestParameters.context !== undefined) {
            queryParameters['context'] = requestParameters.context;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
        }

        const response = await this.request({
            path: `/wp/v2/blocks/{parent}/autosaves/{id}`.replace(`{${"parent"}}`, encodeURIComponent(String(requestParameters.parent))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => WpBlockRevisionFromJSON(jsonValue));
    }

    /**
     */
    async getWpV2BlocksByParentAutosavesById(requestParameters: GetWpV2BlocksByParentAutosavesByIdRequest): Promise<WpBlockRevision> {
        const response = await this.getWpV2BlocksByParentAutosavesByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getWpV2CategoriesRaw(requestParameters: GetWpV2CategoriesRequest): Promise<runtime.ApiResponse<Array<Category>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.context !== undefined) {
            queryParameters['context'] = requestParameters.context;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.per_page !== undefined) {
            queryParameters['per_page'] = requestParameters.per_page;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.exclude) {
            queryParameters['exclude'] = requestParameters.exclude;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include;
        }

        if (requestParameters.order !== undefined) {
            queryParameters['order'] = requestParameters.order;
        }

        if (requestParameters.orderby !== undefined) {
            queryParameters['orderby'] = requestParameters.orderby;
        }

        if (requestParameters.hide_empty !== undefined) {
            queryParameters['hide_empty'] = requestParameters.hide_empty;
        }

        if (requestParameters.parent !== undefined) {
            queryParameters['parent'] = requestParameters.parent;
        }

        if (requestParameters.post !== undefined) {
            queryParameters['post'] = requestParameters.post;
        }

        if (requestParameters.slug) {
            queryParameters['slug'] = requestParameters.slug;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
        }

        const response = await this.request({
            path: `/wp/v2/categories`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CategoryFromJSON));
    }

    /**
     */
    async getWpV2Categories(requestParameters: GetWpV2CategoriesRequest): Promise<Array<Category>> {
        const response = await this.getWpV2CategoriesRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getWpV2CategoriesByIdRaw(requestParameters: GetWpV2CategoriesByIdRequest): Promise<runtime.ApiResponse<Category>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getWpV2CategoriesById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.context !== undefined) {
            queryParameters['context'] = requestParameters.context;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
        }

        const response = await this.request({
            path: `/wp/v2/categories/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CategoryFromJSON(jsonValue));
    }

    /**
     */
    async getWpV2CategoriesById(requestParameters: GetWpV2CategoriesByIdRequest): Promise<Category> {
        const response = await this.getWpV2CategoriesByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getWpV2CommentsRaw(requestParameters: GetWpV2CommentsRequest): Promise<runtime.ApiResponse<Array<Comment>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.context !== undefined) {
            queryParameters['context'] = requestParameters.context;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.per_page !== undefined) {
            queryParameters['per_page'] = requestParameters.per_page;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.after !== undefined) {
            queryParameters['after'] = (requestParameters.after as any).toISOString();
        }

        if (requestParameters.author) {
            queryParameters['author'] = requestParameters.author;
        }

        if (requestParameters.author_exclude) {
            queryParameters['author_exclude'] = requestParameters.author_exclude;
        }

        if (requestParameters.author_email !== undefined) {
            queryParameters['author_email'] = requestParameters.author_email;
        }

        if (requestParameters.before !== undefined) {
            queryParameters['before'] = (requestParameters.before as any).toISOString();
        }

        if (requestParameters.exclude) {
            queryParameters['exclude'] = requestParameters.exclude;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.order !== undefined) {
            queryParameters['order'] = requestParameters.order;
        }

        if (requestParameters.orderby !== undefined) {
            queryParameters['orderby'] = requestParameters.orderby;
        }

        if (requestParameters.parent) {
            queryParameters['parent'] = requestParameters.parent;
        }

        if (requestParameters.parent_exclude) {
            queryParameters['parent_exclude'] = requestParameters.parent_exclude;
        }

        if (requestParameters.post) {
            queryParameters['post'] = requestParameters.post;
        }

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.password !== undefined) {
            queryParameters['password'] = requestParameters.password;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
        }

        const response = await this.request({
            path: `/wp/v2/comments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CommentFromJSON));
    }

    /**
     */
    async getWpV2Comments(requestParameters: GetWpV2CommentsRequest): Promise<Array<Comment>> {
        const response = await this.getWpV2CommentsRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getWpV2CommentsByIdRaw(requestParameters: GetWpV2CommentsByIdRequest): Promise<runtime.ApiResponse<Comment>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getWpV2CommentsById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.context !== undefined) {
            queryParameters['context'] = requestParameters.context;
        }

        if (requestParameters.password !== undefined) {
            queryParameters['password'] = requestParameters.password;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
        }

        const response = await this.request({
            path: `/wp/v2/comments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CommentFromJSON(jsonValue));
    }

    /**
     */
    async getWpV2CommentsById(requestParameters: GetWpV2CommentsByIdRequest): Promise<Comment> {
        const response = await this.getWpV2CommentsByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getWpV2MediaRaw(requestParameters: GetWpV2MediaRequest): Promise<runtime.ApiResponse<Array<Attachment>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.context !== undefined) {
            queryParameters['context'] = requestParameters.context;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.per_page !== undefined) {
            queryParameters['per_page'] = requestParameters.per_page;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.after !== undefined) {
            queryParameters['after'] = (requestParameters.after as any).toISOString();
        }

        if (requestParameters.author) {
            queryParameters['author'] = requestParameters.author;
        }

        if (requestParameters.author_exclude) {
            queryParameters['author_exclude'] = requestParameters.author_exclude;
        }

        if (requestParameters.before !== undefined) {
            queryParameters['before'] = (requestParameters.before as any).toISOString();
        }

        if (requestParameters.exclude) {
            queryParameters['exclude'] = requestParameters.exclude;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.order !== undefined) {
            queryParameters['order'] = requestParameters.order;
        }

        if (requestParameters.orderby !== undefined) {
            queryParameters['orderby'] = requestParameters.orderby;
        }

        if (requestParameters.parent) {
            queryParameters['parent'] = requestParameters.parent;
        }

        if (requestParameters.parent_exclude) {
            queryParameters['parent_exclude'] = requestParameters.parent_exclude;
        }

        if (requestParameters.slug) {
            queryParameters['slug'] = requestParameters.slug;
        }

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        if (requestParameters.media_type !== undefined) {
            queryParameters['media_type'] = requestParameters.media_type;
        }

        if (requestParameters.mime_type !== undefined) {
            queryParameters['mime_type'] = requestParameters.mime_type;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
        }

        const response = await this.request({
            path: `/wp/v2/media`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AttachmentFromJSON));
    }

    /**
     */
    async getWpV2Media(requestParameters: GetWpV2MediaRequest): Promise<Array<Attachment>> {
        const response = await this.getWpV2MediaRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getWpV2MediaByIdRaw(requestParameters: GetWpV2MediaByIdRequest): Promise<runtime.ApiResponse<Attachment>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getWpV2MediaById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.context !== undefined) {
            queryParameters['context'] = requestParameters.context;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
        }

        const response = await this.request({
            path: `/wp/v2/media/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AttachmentFromJSON(jsonValue));
    }

    /**
     */
    async getWpV2MediaById(requestParameters: GetWpV2MediaByIdRequest): Promise<Attachment> {
        const response = await this.getWpV2MediaByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getWpV2PagesRaw(requestParameters: GetWpV2PagesRequest): Promise<runtime.ApiResponse<Array<Page>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.context !== undefined) {
            queryParameters['context'] = requestParameters.context;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.per_page !== undefined) {
            queryParameters['per_page'] = requestParameters.per_page;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.after !== undefined) {
            queryParameters['after'] = (requestParameters.after as any).toISOString();
        }

        if (requestParameters.author) {
            queryParameters['author'] = requestParameters.author;
        }

        if (requestParameters.author_exclude) {
            queryParameters['author_exclude'] = requestParameters.author_exclude;
        }

        if (requestParameters.before !== undefined) {
            queryParameters['before'] = (requestParameters.before as any).toISOString();
        }

        if (requestParameters.exclude) {
            queryParameters['exclude'] = requestParameters.exclude;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include;
        }

        if (requestParameters.menu_order !== undefined) {
            queryParameters['menu_order'] = requestParameters.menu_order;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.order !== undefined) {
            queryParameters['order'] = requestParameters.order;
        }

        if (requestParameters.orderby !== undefined) {
            queryParameters['orderby'] = requestParameters.orderby;
        }

        if (requestParameters.parent) {
            queryParameters['parent'] = requestParameters.parent;
        }

        if (requestParameters.parent_exclude) {
            queryParameters['parent_exclude'] = requestParameters.parent_exclude;
        }

        if (requestParameters.slug) {
            queryParameters['slug'] = requestParameters.slug;
        }

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
        }

        const response = await this.request({
            path: `/wp/v2/pages`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PageFromJSON));
    }

    /**
     */
    async getWpV2Pages(requestParameters: GetWpV2PagesRequest): Promise<Array<Page>> {
        const response = await this.getWpV2PagesRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getWpV2PagesByIdRaw(requestParameters: GetWpV2PagesByIdRequest): Promise<runtime.ApiResponse<Page>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getWpV2PagesById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.context !== undefined) {
            queryParameters['context'] = requestParameters.context;
        }

        if (requestParameters.password !== undefined) {
            queryParameters['password'] = requestParameters.password;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
        }

        const response = await this.request({
            path: `/wp/v2/pages/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PageFromJSON(jsonValue));
    }

    /**
     */
    async getWpV2PagesById(requestParameters: GetWpV2PagesByIdRequest): Promise<Page> {
        const response = await this.getWpV2PagesByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getWpV2PagesByIdAutosavesRaw(requestParameters: GetWpV2PagesByIdAutosavesRequest): Promise<runtime.ApiResponse<Array<PageRevision>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getWpV2PagesByIdAutosaves.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.parent !== undefined) {
            queryParameters['parent'] = requestParameters.parent;
        }

        if (requestParameters.context !== undefined) {
            queryParameters['context'] = requestParameters.context;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
        }

        const response = await this.request({
            path: `/wp/v2/pages/{id}/autosaves`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PageRevisionFromJSON));
    }

    /**
     */
    async getWpV2PagesByIdAutosaves(requestParameters: GetWpV2PagesByIdAutosavesRequest): Promise<Array<PageRevision>> {
        const response = await this.getWpV2PagesByIdAutosavesRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getWpV2PagesByParentAutosavesByIdRaw(requestParameters: GetWpV2PagesByParentAutosavesByIdRequest): Promise<runtime.ApiResponse<PageRevision>> {
        if (requestParameters.parent === null || requestParameters.parent === undefined) {
            throw new runtime.RequiredError('parent','Required parameter requestParameters.parent was null or undefined when calling getWpV2PagesByParentAutosavesById.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getWpV2PagesByParentAutosavesById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.parent2 !== undefined) {
            queryParameters['parent'] = requestParameters.parent2;
        }

        if (requestParameters.context !== undefined) {
            queryParameters['context'] = requestParameters.context;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
        }

        const response = await this.request({
            path: `/wp/v2/pages/{parent}/autosaves/{id}`.replace(`{${"parent"}}`, encodeURIComponent(String(requestParameters.parent))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PageRevisionFromJSON(jsonValue));
    }

    /**
     */
    async getWpV2PagesByParentAutosavesById(requestParameters: GetWpV2PagesByParentAutosavesByIdRequest): Promise<PageRevision> {
        const response = await this.getWpV2PagesByParentAutosavesByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getWpV2PagesByParentRevisionsRaw(requestParameters: GetWpV2PagesByParentRevisionsRequest): Promise<runtime.ApiResponse<Array<PageRevision>>> {
        if (requestParameters.parent === null || requestParameters.parent === undefined) {
            throw new runtime.RequiredError('parent','Required parameter requestParameters.parent was null or undefined when calling getWpV2PagesByParentRevisions.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.parent2 !== undefined) {
            queryParameters['parent'] = requestParameters.parent2;
        }

        if (requestParameters.context !== undefined) {
            queryParameters['context'] = requestParameters.context;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.per_page !== undefined) {
            queryParameters['per_page'] = requestParameters.per_page;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.exclude) {
            queryParameters['exclude'] = requestParameters.exclude;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.order !== undefined) {
            queryParameters['order'] = requestParameters.order;
        }

        if (requestParameters.orderby !== undefined) {
            queryParameters['orderby'] = requestParameters.orderby;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
        }

        const response = await this.request({
            path: `/wp/v2/pages/{parent}/revisions`.replace(`{${"parent"}}`, encodeURIComponent(String(requestParameters.parent))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PageRevisionFromJSON));
    }

    /**
     */
    async getWpV2PagesByParentRevisions(requestParameters: GetWpV2PagesByParentRevisionsRequest): Promise<Array<PageRevision>> {
        const response = await this.getWpV2PagesByParentRevisionsRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getWpV2PagesByParentRevisionsByIdRaw(requestParameters: GetWpV2PagesByParentRevisionsByIdRequest): Promise<runtime.ApiResponse<PageRevision>> {
        if (requestParameters.parent === null || requestParameters.parent === undefined) {
            throw new runtime.RequiredError('parent','Required parameter requestParameters.parent was null or undefined when calling getWpV2PagesByParentRevisionsById.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getWpV2PagesByParentRevisionsById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.parent2 !== undefined) {
            queryParameters['parent'] = requestParameters.parent2;
        }

        if (requestParameters.context !== undefined) {
            queryParameters['context'] = requestParameters.context;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
        }

        const response = await this.request({
            path: `/wp/v2/pages/{parent}/revisions/{id}`.replace(`{${"parent"}}`, encodeURIComponent(String(requestParameters.parent))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PageRevisionFromJSON(jsonValue));
    }

    /**
     */
    async getWpV2PagesByParentRevisionsById(requestParameters: GetWpV2PagesByParentRevisionsByIdRequest): Promise<PageRevision> {
        const response = await this.getWpV2PagesByParentRevisionsByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getWpV2PostsRaw(requestParameters: GetWpV2PostsRequest): Promise<runtime.ApiResponse<Array<Post>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.context !== undefined) {
            queryParameters['context'] = requestParameters.context;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.per_page !== undefined) {
            queryParameters['per_page'] = requestParameters.per_page;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.after !== undefined) {
            queryParameters['after'] = (requestParameters.after as any).toISOString();
        }

        if (requestParameters.author) {
            queryParameters['author'] = requestParameters.author;
        }

        if (requestParameters.author_exclude) {
            queryParameters['author_exclude'] = requestParameters.author_exclude;
        }

        if (requestParameters.before !== undefined) {
            queryParameters['before'] = (requestParameters.before as any).toISOString();
        }

        if (requestParameters.exclude) {
            queryParameters['exclude'] = requestParameters.exclude;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.order !== undefined) {
            queryParameters['order'] = requestParameters.order;
        }

        if (requestParameters.orderby !== undefined) {
            queryParameters['orderby'] = requestParameters.orderby;
        }

        if (requestParameters.slug) {
            queryParameters['slug'] = requestParameters.slug;
        }

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        if (requestParameters.categories) {
            queryParameters['categories'] = requestParameters.categories;
        }

        if (requestParameters.categories_exclude) {
            queryParameters['categories_exclude'] = requestParameters.categories_exclude;
        }

        if (requestParameters.tags) {
            queryParameters['tags'] = requestParameters.tags;
        }

        if (requestParameters.tags_exclude) {
            queryParameters['tags_exclude'] = requestParameters.tags_exclude;
        }

        if (requestParameters.sticky !== undefined) {
            queryParameters['sticky'] = requestParameters.sticky;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
        }

        const response = await this.request({
            path: `/wp/v2/posts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PostFromJSON));
    }

    /**
     */
    async getWpV2Posts(requestParameters: GetWpV2PostsRequest): Promise<Array<Post>> {
        const response = await this.getWpV2PostsRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getWpV2PostsByIdRaw(requestParameters: GetWpV2PostsByIdRequest): Promise<runtime.ApiResponse<Post>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getWpV2PostsById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.context !== undefined) {
            queryParameters['context'] = requestParameters.context;
        }

        if (requestParameters.password !== undefined) {
            queryParameters['password'] = requestParameters.password;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
        }

        const response = await this.request({
            path: `/wp/v2/posts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PostFromJSON(jsonValue));
    }

    /**
     */
    async getWpV2PostsById(requestParameters: GetWpV2PostsByIdRequest): Promise<Post> {
        const response = await this.getWpV2PostsByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getWpV2PostsByIdAutosavesRaw(requestParameters: GetWpV2PostsByIdAutosavesRequest): Promise<runtime.ApiResponse<Array<PostRevision>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getWpV2PostsByIdAutosaves.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.parent !== undefined) {
            queryParameters['parent'] = requestParameters.parent;
        }

        if (requestParameters.context !== undefined) {
            queryParameters['context'] = requestParameters.context;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
        }

        const response = await this.request({
            path: `/wp/v2/posts/{id}/autosaves`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PostRevisionFromJSON));
    }

    /**
     */
    async getWpV2PostsByIdAutosaves(requestParameters: GetWpV2PostsByIdAutosavesRequest): Promise<Array<PostRevision>> {
        const response = await this.getWpV2PostsByIdAutosavesRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getWpV2PostsByParentAutosavesByIdRaw(requestParameters: GetWpV2PostsByParentAutosavesByIdRequest): Promise<runtime.ApiResponse<PostRevision>> {
        if (requestParameters.parent === null || requestParameters.parent === undefined) {
            throw new runtime.RequiredError('parent','Required parameter requestParameters.parent was null or undefined when calling getWpV2PostsByParentAutosavesById.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getWpV2PostsByParentAutosavesById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.parent2 !== undefined) {
            queryParameters['parent'] = requestParameters.parent2;
        }

        if (requestParameters.context !== undefined) {
            queryParameters['context'] = requestParameters.context;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
        }

        const response = await this.request({
            path: `/wp/v2/posts/{parent}/autosaves/{id}`.replace(`{${"parent"}}`, encodeURIComponent(String(requestParameters.parent))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PostRevisionFromJSON(jsonValue));
    }

    /**
     */
    async getWpV2PostsByParentAutosavesById(requestParameters: GetWpV2PostsByParentAutosavesByIdRequest): Promise<PostRevision> {
        const response = await this.getWpV2PostsByParentAutosavesByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getWpV2PostsByParentRevisionsRaw(requestParameters: GetWpV2PostsByParentRevisionsRequest): Promise<runtime.ApiResponse<Array<PostRevision>>> {
        if (requestParameters.parent === null || requestParameters.parent === undefined) {
            throw new runtime.RequiredError('parent','Required parameter requestParameters.parent was null or undefined when calling getWpV2PostsByParentRevisions.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.parent2 !== undefined) {
            queryParameters['parent'] = requestParameters.parent2;
        }

        if (requestParameters.context !== undefined) {
            queryParameters['context'] = requestParameters.context;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.per_page !== undefined) {
            queryParameters['per_page'] = requestParameters.per_page;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.exclude) {
            queryParameters['exclude'] = requestParameters.exclude;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.order !== undefined) {
            queryParameters['order'] = requestParameters.order;
        }

        if (requestParameters.orderby !== undefined) {
            queryParameters['orderby'] = requestParameters.orderby;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
        }

        const response = await this.request({
            path: `/wp/v2/posts/{parent}/revisions`.replace(`{${"parent"}}`, encodeURIComponent(String(requestParameters.parent))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PostRevisionFromJSON));
    }

    /**
     */
    async getWpV2PostsByParentRevisions(requestParameters: GetWpV2PostsByParentRevisionsRequest): Promise<Array<PostRevision>> {
        const response = await this.getWpV2PostsByParentRevisionsRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getWpV2PostsByParentRevisionsByIdRaw(requestParameters: GetWpV2PostsByParentRevisionsByIdRequest): Promise<runtime.ApiResponse<PostRevision>> {
        if (requestParameters.parent === null || requestParameters.parent === undefined) {
            throw new runtime.RequiredError('parent','Required parameter requestParameters.parent was null or undefined when calling getWpV2PostsByParentRevisionsById.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getWpV2PostsByParentRevisionsById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.parent2 !== undefined) {
            queryParameters['parent'] = requestParameters.parent2;
        }

        if (requestParameters.context !== undefined) {
            queryParameters['context'] = requestParameters.context;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
        }

        const response = await this.request({
            path: `/wp/v2/posts/{parent}/revisions/{id}`.replace(`{${"parent"}}`, encodeURIComponent(String(requestParameters.parent))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PostRevisionFromJSON(jsonValue));
    }

    /**
     */
    async getWpV2PostsByParentRevisionsById(requestParameters: GetWpV2PostsByParentRevisionsByIdRequest): Promise<PostRevision> {
        const response = await this.getWpV2PostsByParentRevisionsByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getWpV2SearchRaw(requestParameters: GetWpV2SearchRequest): Promise<runtime.ApiResponse<Array<SearchResult>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.context !== undefined) {
            queryParameters['context'] = requestParameters.context;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.per_page !== undefined) {
            queryParameters['per_page'] = requestParameters.per_page;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.subtype !== undefined) {
            queryParameters['subtype'] = requestParameters.subtype;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
        }

        const response = await this.request({
            path: `/wp/v2/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SearchResultFromJSON));
    }

    /**
     */
    async getWpV2Search(requestParameters: GetWpV2SearchRequest): Promise<Array<SearchResult>> {
        const response = await this.getWpV2SearchRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getWpV2SettingsRaw(): Promise<runtime.ApiResponse<Array<Settings>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
        }

        const response = await this.request({
            path: `/wp/v2/settings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SettingsFromJSON));
    }

    /**
     */
    async getWpV2Settings(): Promise<Array<Settings>> {
        const response = await this.getWpV2SettingsRaw();
        return await response.value();
    }

    /**
     */
    async getWpV2StatusesRaw(requestParameters: GetWpV2StatusesRequest): Promise<runtime.ApiResponse<Array<Status>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.context !== undefined) {
            queryParameters['context'] = requestParameters.context;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
        }

        const response = await this.request({
            path: `/wp/v2/statuses`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StatusFromJSON));
    }

    /**
     */
    async getWpV2Statuses(requestParameters: GetWpV2StatusesRequest): Promise<Array<Status>> {
        const response = await this.getWpV2StatusesRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getWpV2StatusesByStatusRaw(requestParameters: GetWpV2StatusesByStatusRequest): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.status === null || requestParameters.status === undefined) {
            throw new runtime.RequiredError('status','Required parameter requestParameters.status was null or undefined when calling getWpV2StatusesByStatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.status2 !== undefined) {
            queryParameters['status'] = requestParameters.status2;
        }

        if (requestParameters.context !== undefined) {
            queryParameters['context'] = requestParameters.context;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
        }

        const response = await this.request({
            path: `/wp/v2/statuses/{status}`.replace(`{${"status"}}`, encodeURIComponent(String(requestParameters.status))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     */
    async getWpV2StatusesByStatus(requestParameters: GetWpV2StatusesByStatusRequest): Promise<Status> {
        const response = await this.getWpV2StatusesByStatusRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getWpV2TagsRaw(requestParameters: GetWpV2TagsRequest): Promise<runtime.ApiResponse<Array<Tag>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.context !== undefined) {
            queryParameters['context'] = requestParameters.context;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.per_page !== undefined) {
            queryParameters['per_page'] = requestParameters.per_page;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.exclude) {
            queryParameters['exclude'] = requestParameters.exclude;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.order !== undefined) {
            queryParameters['order'] = requestParameters.order;
        }

        if (requestParameters.orderby !== undefined) {
            queryParameters['orderby'] = requestParameters.orderby;
        }

        if (requestParameters.hide_empty !== undefined) {
            queryParameters['hide_empty'] = requestParameters.hide_empty;
        }

        if (requestParameters.post !== undefined) {
            queryParameters['post'] = requestParameters.post;
        }

        if (requestParameters.slug) {
            queryParameters['slug'] = requestParameters.slug;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
        }

        const response = await this.request({
            path: `/wp/v2/tags`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TagFromJSON));
    }

    /**
     */
    async getWpV2Tags(requestParameters: GetWpV2TagsRequest): Promise<Array<Tag>> {
        const response = await this.getWpV2TagsRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getWpV2TagsByIdRaw(requestParameters: GetWpV2TagsByIdRequest): Promise<runtime.ApiResponse<Tag>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getWpV2TagsById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.context !== undefined) {
            queryParameters['context'] = requestParameters.context;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
        }

        const response = await this.request({
            path: `/wp/v2/tags/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TagFromJSON(jsonValue));
    }

    /**
     */
    async getWpV2TagsById(requestParameters: GetWpV2TagsByIdRequest): Promise<Tag> {
        const response = await this.getWpV2TagsByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getWpV2TaxonomiesRaw(requestParameters: GetWpV2TaxonomiesRequest): Promise<runtime.ApiResponse<Array<Taxonomy>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.context !== undefined) {
            queryParameters['context'] = requestParameters.context;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
        }

        const response = await this.request({
            path: `/wp/v2/taxonomies`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TaxonomyFromJSON));
    }

    /**
     */
    async getWpV2Taxonomies(requestParameters: GetWpV2TaxonomiesRequest): Promise<Array<Taxonomy>> {
        const response = await this.getWpV2TaxonomiesRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getWpV2TaxonomiesByTaxonomyRaw(requestParameters: GetWpV2TaxonomiesByTaxonomyRequest): Promise<runtime.ApiResponse<Taxonomy>> {
        if (requestParameters.taxonomy === null || requestParameters.taxonomy === undefined) {
            throw new runtime.RequiredError('taxonomy','Required parameter requestParameters.taxonomy was null or undefined when calling getWpV2TaxonomiesByTaxonomy.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.taxonomy2 !== undefined) {
            queryParameters['taxonomy'] = requestParameters.taxonomy2;
        }

        if (requestParameters.context !== undefined) {
            queryParameters['context'] = requestParameters.context;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
        }

        const response = await this.request({
            path: `/wp/v2/taxonomies/{taxonomy}`.replace(`{${"taxonomy"}}`, encodeURIComponent(String(requestParameters.taxonomy))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TaxonomyFromJSON(jsonValue));
    }

    /**
     */
    async getWpV2TaxonomiesByTaxonomy(requestParameters: GetWpV2TaxonomiesByTaxonomyRequest): Promise<Taxonomy> {
        const response = await this.getWpV2TaxonomiesByTaxonomyRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getWpV2ThemesRaw(requestParameters: GetWpV2ThemesRequest): Promise<runtime.ApiResponse<Array<Theme>>> {
        if (requestParameters.status === null || requestParameters.status === undefined) {
            throw new runtime.RequiredError('status','Required parameter requestParameters.status was null or undefined when calling getWpV2Themes.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.context !== undefined) {
            queryParameters['context'] = requestParameters.context;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.per_page !== undefined) {
            queryParameters['per_page'] = requestParameters.per_page;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.status) {
            queryParameters['status'] = requestParameters.status;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
        }

        const response = await this.request({
            path: `/wp/v2/themes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ThemeFromJSON));
    }

    /**
     */
    async getWpV2Themes(requestParameters: GetWpV2ThemesRequest): Promise<Array<Theme>> {
        const response = await this.getWpV2ThemesRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getWpV2TypesRaw(requestParameters: GetWpV2TypesRequest): Promise<runtime.ApiResponse<Array<Type>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.context !== undefined) {
            queryParameters['context'] = requestParameters.context;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
        }

        const response = await this.request({
            path: `/wp/v2/types`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TypeFromJSON));
    }

    /**
     */
    async getWpV2Types(requestParameters: GetWpV2TypesRequest): Promise<Array<Type>> {
        const response = await this.getWpV2TypesRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getWpV2TypesByTypeRaw(requestParameters: GetWpV2TypesByTypeRequest): Promise<runtime.ApiResponse<Type>> {
        if (requestParameters.type === null || requestParameters.type === undefined) {
            throw new runtime.RequiredError('type','Required parameter requestParameters.type was null or undefined when calling getWpV2TypesByType.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.type2 !== undefined) {
            queryParameters['type'] = requestParameters.type2;
        }

        if (requestParameters.context !== undefined) {
            queryParameters['context'] = requestParameters.context;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
        }

        const response = await this.request({
            path: `/wp/v2/types/{type}`.replace(`{${"type"}}`, encodeURIComponent(String(requestParameters.type))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TypeFromJSON(jsonValue));
    }

    /**
     */
    async getWpV2TypesByType(requestParameters: GetWpV2TypesByTypeRequest): Promise<Type> {
        const response = await this.getWpV2TypesByTypeRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getWpV2UsersRaw(requestParameters: GetWpV2UsersRequest): Promise<runtime.ApiResponse<Array<User>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.context !== undefined) {
            queryParameters['context'] = requestParameters.context;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.per_page !== undefined) {
            queryParameters['per_page'] = requestParameters.per_page;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.exclude) {
            queryParameters['exclude'] = requestParameters.exclude;
        }

        if (requestParameters.include) {
            queryParameters['include'] = requestParameters.include;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.order !== undefined) {
            queryParameters['order'] = requestParameters.order;
        }

        if (requestParameters.orderby !== undefined) {
            queryParameters['orderby'] = requestParameters.orderby;
        }

        if (requestParameters.slug) {
            queryParameters['slug'] = requestParameters.slug;
        }

        if (requestParameters.roles) {
            queryParameters['roles'] = requestParameters.roles;
        }

        if (requestParameters.who !== undefined) {
            queryParameters['who'] = requestParameters.who;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
        }

        const response = await this.request({
            path: `/wp/v2/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserFromJSON));
    }

    /**
     */
    async getWpV2Users(requestParameters: GetWpV2UsersRequest): Promise<Array<User>> {
        const response = await this.getWpV2UsersRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getWpV2UsersByIdRaw(requestParameters: GetWpV2UsersByIdRequest): Promise<runtime.ApiResponse<User>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getWpV2UsersById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.context !== undefined) {
            queryParameters['context'] = requestParameters.context;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
        }

        const response = await this.request({
            path: `/wp/v2/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     */
    async getWpV2UsersById(requestParameters: GetWpV2UsersByIdRequest): Promise<User> {
        const response = await this.getWpV2UsersByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getWpV2UsersMeRaw(requestParameters: GetWpV2UsersMeRequest): Promise<runtime.ApiResponse<Array<User>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.context !== undefined) {
            queryParameters['context'] = requestParameters.context;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
        }

        const response = await this.request({
            path: `/wp/v2/users/me`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserFromJSON));
    }

    /**
     */
    async getWpV2UsersMe(requestParameters: GetWpV2UsersMeRequest): Promise<Array<User>> {
        const response = await this.getWpV2UsersMeRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async postWpV2BlocksRaw(requestParameters: PostWpV2BlocksRequest): Promise<runtime.ApiResponse<WpBlock>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.date !== undefined) {
            formParams.append('date', requestParameters.date as any);
        }

        if (requestParameters.date_gmt !== undefined) {
            formParams.append('date_gmt', requestParameters.date_gmt as any);
        }

        if (requestParameters.slug !== undefined) {
            formParams.append('slug', requestParameters.slug as any);
        }

        if (requestParameters.status !== undefined) {
            formParams.append('status', requestParameters.status as any);
        }

        if (requestParameters.password !== undefined) {
            formParams.append('password', requestParameters.password as any);
        }

        if (requestParameters.title !== undefined) {
            formParams.append('title', requestParameters.title as any);
        }

        if (requestParameters.content !== undefined) {
            formParams.append('content', requestParameters.content as any);
        }

        if (requestParameters.template !== undefined) {
            formParams.append('template', requestParameters.template as any);
        }

        const response = await this.request({
            path: `/wp/v2/blocks`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => WpBlockFromJSON(jsonValue));
    }

    /**
     */
    async postWpV2Blocks(requestParameters: PostWpV2BlocksRequest): Promise<WpBlock> {
        const response = await this.postWpV2BlocksRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async postWpV2BlocksByIdRaw(requestParameters: PostWpV2BlocksByIdRequest): Promise<runtime.ApiResponse<WpBlock>> {
        if (requestParameters.id2 === null || requestParameters.id2 === undefined) {
            throw new runtime.RequiredError('id2','Required parameter requestParameters.id2 was null or undefined when calling postWpV2BlocksById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.id !== undefined) {
            formParams.append('id', requestParameters.id as any);
        }

        if (requestParameters.date !== undefined) {
            formParams.append('date', requestParameters.date as any);
        }

        if (requestParameters.date_gmt !== undefined) {
            formParams.append('date_gmt', requestParameters.date_gmt as any);
        }

        if (requestParameters.slug !== undefined) {
            formParams.append('slug', requestParameters.slug as any);
        }

        if (requestParameters.status !== undefined) {
            formParams.append('status', requestParameters.status as any);
        }

        if (requestParameters.password !== undefined) {
            formParams.append('password', requestParameters.password as any);
        }

        if (requestParameters.title !== undefined) {
            formParams.append('title', requestParameters.title as any);
        }

        if (requestParameters.content !== undefined) {
            formParams.append('content', requestParameters.content as any);
        }

        if (requestParameters.template !== undefined) {
            formParams.append('template', requestParameters.template as any);
        }

        const response = await this.request({
            path: `/wp/v2/blocks/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id2))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => WpBlockFromJSON(jsonValue));
    }

    /**
     */
    async postWpV2BlocksById(requestParameters: PostWpV2BlocksByIdRequest): Promise<WpBlock> {
        const response = await this.postWpV2BlocksByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async postWpV2BlocksByIdAutosavesRaw(requestParameters: PostWpV2BlocksByIdAutosavesRequest): Promise<runtime.ApiResponse<WpBlockRevision>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling postWpV2BlocksByIdAutosaves.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.parent !== undefined) {
            formParams.append('parent', requestParameters.parent as any);
        }

        if (requestParameters.date !== undefined) {
            formParams.append('date', requestParameters.date as any);
        }

        if (requestParameters.date_gmt !== undefined) {
            formParams.append('date_gmt', requestParameters.date_gmt as any);
        }

        if (requestParameters.slug !== undefined) {
            formParams.append('slug', requestParameters.slug as any);
        }

        if (requestParameters.status !== undefined) {
            formParams.append('status', requestParameters.status as any);
        }

        if (requestParameters.password !== undefined) {
            formParams.append('password', requestParameters.password as any);
        }

        if (requestParameters.title !== undefined) {
            formParams.append('title', requestParameters.title as any);
        }

        if (requestParameters.content !== undefined) {
            formParams.append('content', requestParameters.content as any);
        }

        if (requestParameters.template !== undefined) {
            formParams.append('template', requestParameters.template as any);
        }

        const response = await this.request({
            path: `/wp/v2/blocks/{id}/autosaves`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => WpBlockRevisionFromJSON(jsonValue));
    }

    /**
     */
    async postWpV2BlocksByIdAutosaves(requestParameters: PostWpV2BlocksByIdAutosavesRequest): Promise<WpBlockRevision> {
        const response = await this.postWpV2BlocksByIdAutosavesRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async postWpV2CategoriesRaw(requestParameters: PostWpV2CategoriesRequest): Promise<runtime.ApiResponse<Category>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling postWpV2Categories.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.description !== undefined) {
            formParams.append('description', requestParameters.description as any);
        }

        if (requestParameters.name !== undefined) {
            formParams.append('name', requestParameters.name as any);
        }

        if (requestParameters.slug !== undefined) {
            formParams.append('slug', requestParameters.slug as any);
        }

        if (requestParameters.parent !== undefined) {
            formParams.append('parent', requestParameters.parent as any);
        }

        if (requestParameters.meta !== undefined) {
            formParams.append('meta', requestParameters.meta as any);
        }

        const response = await this.request({
            path: `/wp/v2/categories`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CategoryFromJSON(jsonValue));
    }

    /**
     */
    async postWpV2Categories(requestParameters: PostWpV2CategoriesRequest): Promise<Category> {
        const response = await this.postWpV2CategoriesRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async postWpV2CategoriesByIdRaw(requestParameters: PostWpV2CategoriesByIdRequest): Promise<runtime.ApiResponse<Category>> {
        if (requestParameters.id2 === null || requestParameters.id2 === undefined) {
            throw new runtime.RequiredError('id2','Required parameter requestParameters.id2 was null or undefined when calling postWpV2CategoriesById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.id !== undefined) {
            formParams.append('id', requestParameters.id as any);
        }

        if (requestParameters.description !== undefined) {
            formParams.append('description', requestParameters.description as any);
        }

        if (requestParameters.name !== undefined) {
            formParams.append('name', requestParameters.name as any);
        }

        if (requestParameters.slug !== undefined) {
            formParams.append('slug', requestParameters.slug as any);
        }

        if (requestParameters.parent !== undefined) {
            formParams.append('parent', requestParameters.parent as any);
        }

        if (requestParameters.meta !== undefined) {
            formParams.append('meta', requestParameters.meta as any);
        }

        const response = await this.request({
            path: `/wp/v2/categories/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id2))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CategoryFromJSON(jsonValue));
    }

    /**
     */
    async postWpV2CategoriesById(requestParameters: PostWpV2CategoriesByIdRequest): Promise<Category> {
        const response = await this.postWpV2CategoriesByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async postWpV2CommentsRaw(requestParameters: PostWpV2CommentsRequest): Promise<runtime.ApiResponse<Comment>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.author !== undefined) {
            formParams.append('author', requestParameters.author as any);
        }

        if (requestParameters.author_email !== undefined) {
            formParams.append('author_email', requestParameters.author_email as any);
        }

        if (requestParameters.author_ip !== undefined) {
            formParams.append('author_ip', requestParameters.author_ip as any);
        }

        if (requestParameters.author_name !== undefined) {
            formParams.append('author_name', requestParameters.author_name as any);
        }

        if (requestParameters.author_url !== undefined) {
            formParams.append('author_url', requestParameters.author_url as any);
        }

        if (requestParameters.author_user_agent !== undefined) {
            formParams.append('author_user_agent', requestParameters.author_user_agent as any);
        }

        if (requestParameters.content !== undefined) {
            formParams.append('content', requestParameters.content as any);
        }

        if (requestParameters.date !== undefined) {
            formParams.append('date', requestParameters.date as any);
        }

        if (requestParameters.date_gmt !== undefined) {
            formParams.append('date_gmt', requestParameters.date_gmt as any);
        }

        if (requestParameters.parent !== undefined) {
            formParams.append('parent', requestParameters.parent as any);
        }

        if (requestParameters.post !== undefined) {
            formParams.append('post', requestParameters.post as any);
        }

        if (requestParameters.status !== undefined) {
            formParams.append('status', requestParameters.status as any);
        }

        if (requestParameters.meta !== undefined) {
            formParams.append('meta', requestParameters.meta as any);
        }

        const response = await this.request({
            path: `/wp/v2/comments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CommentFromJSON(jsonValue));
    }

    /**
     */
    async postWpV2Comments(requestParameters: PostWpV2CommentsRequest): Promise<Comment> {
        const response = await this.postWpV2CommentsRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async postWpV2CommentsByIdRaw(requestParameters: PostWpV2CommentsByIdRequest): Promise<runtime.ApiResponse<Comment>> {
        if (requestParameters.id2 === null || requestParameters.id2 === undefined) {
            throw new runtime.RequiredError('id2','Required parameter requestParameters.id2 was null or undefined when calling postWpV2CommentsById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.id !== undefined) {
            formParams.append('id', requestParameters.id as any);
        }

        if (requestParameters.author !== undefined) {
            formParams.append('author', requestParameters.author as any);
        }

        if (requestParameters.author_email !== undefined) {
            formParams.append('author_email', requestParameters.author_email as any);
        }

        if (requestParameters.author_ip !== undefined) {
            formParams.append('author_ip', requestParameters.author_ip as any);
        }

        if (requestParameters.author_name !== undefined) {
            formParams.append('author_name', requestParameters.author_name as any);
        }

        if (requestParameters.author_url !== undefined) {
            formParams.append('author_url', requestParameters.author_url as any);
        }

        if (requestParameters.author_user_agent !== undefined) {
            formParams.append('author_user_agent', requestParameters.author_user_agent as any);
        }

        if (requestParameters.content !== undefined) {
            formParams.append('content', requestParameters.content as any);
        }

        if (requestParameters.date !== undefined) {
            formParams.append('date', requestParameters.date as any);
        }

        if (requestParameters.date_gmt !== undefined) {
            formParams.append('date_gmt', requestParameters.date_gmt as any);
        }

        if (requestParameters.parent !== undefined) {
            formParams.append('parent', requestParameters.parent as any);
        }

        if (requestParameters.post !== undefined) {
            formParams.append('post', requestParameters.post as any);
        }

        if (requestParameters.status !== undefined) {
            formParams.append('status', requestParameters.status as any);
        }

        if (requestParameters.meta !== undefined) {
            formParams.append('meta', requestParameters.meta as any);
        }

        const response = await this.request({
            path: `/wp/v2/comments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id2))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CommentFromJSON(jsonValue));
    }

    /**
     */
    async postWpV2CommentsById(requestParameters: PostWpV2CommentsByIdRequest): Promise<Comment> {
        const response = await this.postWpV2CommentsByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async postWpV2MediaRaw(requestParameters: PostWpV2MediaRequest): Promise<runtime.ApiResponse<Attachment>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.date !== undefined) {
            formParams.append('date', requestParameters.date as any);
        }

        if (requestParameters.date_gmt !== undefined) {
            formParams.append('date_gmt', requestParameters.date_gmt as any);
        }

        if (requestParameters.slug !== undefined) {
            formParams.append('slug', requestParameters.slug as any);
        }

        if (requestParameters.status !== undefined) {
            formParams.append('status', requestParameters.status as any);
        }

        if (requestParameters.title !== undefined) {
            formParams.append('title', requestParameters.title as any);
        }

        if (requestParameters.author !== undefined) {
            formParams.append('author', requestParameters.author as any);
        }

        if (requestParameters.comment_status !== undefined) {
            formParams.append('comment_status', requestParameters.comment_status as any);
        }

        if (requestParameters.ping_status !== undefined) {
            formParams.append('ping_status', requestParameters.ping_status as any);
        }

        if (requestParameters.meta !== undefined) {
            formParams.append('meta', requestParameters.meta as any);
        }

        if (requestParameters.template !== undefined) {
            formParams.append('template', requestParameters.template as any);
        }

        if (requestParameters.alt_text !== undefined) {
            formParams.append('alt_text', requestParameters.alt_text as any);
        }

        if (requestParameters.caption !== undefined) {
            formParams.append('caption', requestParameters.caption as any);
        }

        if (requestParameters.description !== undefined) {
            formParams.append('description', requestParameters.description as any);
        }

        if (requestParameters.post !== undefined) {
            formParams.append('post', requestParameters.post as any);
        }

        const response = await this.request({
            path: `/wp/v2/media`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AttachmentFromJSON(jsonValue));
    }

    /**
     */
    async postWpV2Media(requestParameters: PostWpV2MediaRequest): Promise<Attachment> {
        const response = await this.postWpV2MediaRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async postWpV2MediaByIdRaw(requestParameters: PostWpV2MediaByIdRequest): Promise<runtime.ApiResponse<Attachment>> {
        if (requestParameters.id2 === null || requestParameters.id2 === undefined) {
            throw new runtime.RequiredError('id2','Required parameter requestParameters.id2 was null or undefined when calling postWpV2MediaById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.id !== undefined) {
            formParams.append('id', requestParameters.id as any);
        }

        if (requestParameters.date !== undefined) {
            formParams.append('date', requestParameters.date as any);
        }

        if (requestParameters.date_gmt !== undefined) {
            formParams.append('date_gmt', requestParameters.date_gmt as any);
        }

        if (requestParameters.slug !== undefined) {
            formParams.append('slug', requestParameters.slug as any);
        }

        if (requestParameters.status !== undefined) {
            formParams.append('status', requestParameters.status as any);
        }

        if (requestParameters.title !== undefined) {
            formParams.append('title', requestParameters.title as any);
        }

        if (requestParameters.author !== undefined) {
            formParams.append('author', requestParameters.author as any);
        }

        if (requestParameters.comment_status !== undefined) {
            formParams.append('comment_status', requestParameters.comment_status as any);
        }

        if (requestParameters.ping_status !== undefined) {
            formParams.append('ping_status', requestParameters.ping_status as any);
        }

        if (requestParameters.meta !== undefined) {
            formParams.append('meta', requestParameters.meta as any);
        }

        if (requestParameters.template !== undefined) {
            formParams.append('template', requestParameters.template as any);
        }

        if (requestParameters.alt_text !== undefined) {
            formParams.append('alt_text', requestParameters.alt_text as any);
        }

        if (requestParameters.caption !== undefined) {
            formParams.append('caption', requestParameters.caption as any);
        }

        if (requestParameters.description !== undefined) {
            formParams.append('description', requestParameters.description as any);
        }

        if (requestParameters.post !== undefined) {
            formParams.append('post', requestParameters.post as any);
        }

        const response = await this.request({
            path: `/wp/v2/media/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id2))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AttachmentFromJSON(jsonValue));
    }

    /**
     */
    async postWpV2MediaById(requestParameters: PostWpV2MediaByIdRequest): Promise<Attachment> {
        const response = await this.postWpV2MediaByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async postWpV2PagesRaw(requestParameters: PostWpV2PagesRequest): Promise<runtime.ApiResponse<Page>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.date !== undefined) {
            formParams.append('date', requestParameters.date as any);
        }

        if (requestParameters.date_gmt !== undefined) {
            formParams.append('date_gmt', requestParameters.date_gmt as any);
        }

        if (requestParameters.slug !== undefined) {
            formParams.append('slug', requestParameters.slug as any);
        }

        if (requestParameters.status !== undefined) {
            formParams.append('status', requestParameters.status as any);
        }

        if (requestParameters.password !== undefined) {
            formParams.append('password', requestParameters.password as any);
        }

        if (requestParameters.parent !== undefined) {
            formParams.append('parent', requestParameters.parent as any);
        }

        if (requestParameters.title !== undefined) {
            formParams.append('title', requestParameters.title as any);
        }

        if (requestParameters.content !== undefined) {
            formParams.append('content', requestParameters.content as any);
        }

        if (requestParameters.author !== undefined) {
            formParams.append('author', requestParameters.author as any);
        }

        if (requestParameters.excerpt !== undefined) {
            formParams.append('excerpt', requestParameters.excerpt as any);
        }

        if (requestParameters.featured_media !== undefined) {
            formParams.append('featured_media', requestParameters.featured_media as any);
        }

        if (requestParameters.comment_status !== undefined) {
            formParams.append('comment_status', requestParameters.comment_status as any);
        }

        if (requestParameters.ping_status !== undefined) {
            formParams.append('ping_status', requestParameters.ping_status as any);
        }

        if (requestParameters.menu_order !== undefined) {
            formParams.append('menu_order', requestParameters.menu_order as any);
        }

        if (requestParameters.meta !== undefined) {
            formParams.append('meta', requestParameters.meta as any);
        }

        if (requestParameters.template !== undefined) {
            formParams.append('template', requestParameters.template as any);
        }

        const response = await this.request({
            path: `/wp/v2/pages`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PageFromJSON(jsonValue));
    }

    /**
     */
    async postWpV2Pages(requestParameters: PostWpV2PagesRequest): Promise<Page> {
        const response = await this.postWpV2PagesRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async postWpV2PagesByIdRaw(requestParameters: PostWpV2PagesByIdRequest): Promise<runtime.ApiResponse<Page>> {
        if (requestParameters.id2 === null || requestParameters.id2 === undefined) {
            throw new runtime.RequiredError('id2','Required parameter requestParameters.id2 was null or undefined when calling postWpV2PagesById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.id !== undefined) {
            formParams.append('id', requestParameters.id as any);
        }

        if (requestParameters.date !== undefined) {
            formParams.append('date', requestParameters.date as any);
        }

        if (requestParameters.date_gmt !== undefined) {
            formParams.append('date_gmt', requestParameters.date_gmt as any);
        }

        if (requestParameters.slug !== undefined) {
            formParams.append('slug', requestParameters.slug as any);
        }

        if (requestParameters.status !== undefined) {
            formParams.append('status', requestParameters.status as any);
        }

        if (requestParameters.password !== undefined) {
            formParams.append('password', requestParameters.password as any);
        }

        if (requestParameters.parent !== undefined) {
            formParams.append('parent', requestParameters.parent as any);
        }

        if (requestParameters.title !== undefined) {
            formParams.append('title', requestParameters.title as any);
        }

        if (requestParameters.content !== undefined) {
            formParams.append('content', requestParameters.content as any);
        }

        if (requestParameters.author !== undefined) {
            formParams.append('author', requestParameters.author as any);
        }

        if (requestParameters.excerpt !== undefined) {
            formParams.append('excerpt', requestParameters.excerpt as any);
        }

        if (requestParameters.featured_media !== undefined) {
            formParams.append('featured_media', requestParameters.featured_media as any);
        }

        if (requestParameters.comment_status !== undefined) {
            formParams.append('comment_status', requestParameters.comment_status as any);
        }

        if (requestParameters.ping_status !== undefined) {
            formParams.append('ping_status', requestParameters.ping_status as any);
        }

        if (requestParameters.menu_order !== undefined) {
            formParams.append('menu_order', requestParameters.menu_order as any);
        }

        if (requestParameters.meta !== undefined) {
            formParams.append('meta', requestParameters.meta as any);
        }

        if (requestParameters.template !== undefined) {
            formParams.append('template', requestParameters.template as any);
        }

        const response = await this.request({
            path: `/wp/v2/pages/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id2))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PageFromJSON(jsonValue));
    }

    /**
     */
    async postWpV2PagesById(requestParameters: PostWpV2PagesByIdRequest): Promise<Page> {
        const response = await this.postWpV2PagesByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async postWpV2PagesByIdAutosavesRaw(requestParameters: PostWpV2PagesByIdAutosavesRequest): Promise<runtime.ApiResponse<PageRevision>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling postWpV2PagesByIdAutosaves.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.parent !== undefined) {
            formParams.append('parent', requestParameters.parent as any);
        }

        if (requestParameters.date !== undefined) {
            formParams.append('date', requestParameters.date as any);
        }

        if (requestParameters.date_gmt !== undefined) {
            formParams.append('date_gmt', requestParameters.date_gmt as any);
        }

        if (requestParameters.slug !== undefined) {
            formParams.append('slug', requestParameters.slug as any);
        }

        if (requestParameters.status !== undefined) {
            formParams.append('status', requestParameters.status as any);
        }

        if (requestParameters.password !== undefined) {
            formParams.append('password', requestParameters.password as any);
        }

        if (requestParameters.title !== undefined) {
            formParams.append('title', requestParameters.title as any);
        }

        if (requestParameters.content !== undefined) {
            formParams.append('content', requestParameters.content as any);
        }

        if (requestParameters.author !== undefined) {
            formParams.append('author', requestParameters.author as any);
        }

        if (requestParameters.excerpt !== undefined) {
            formParams.append('excerpt', requestParameters.excerpt as any);
        }

        if (requestParameters.featured_media !== undefined) {
            formParams.append('featured_media', requestParameters.featured_media as any);
        }

        if (requestParameters.comment_status !== undefined) {
            formParams.append('comment_status', requestParameters.comment_status as any);
        }

        if (requestParameters.ping_status !== undefined) {
            formParams.append('ping_status', requestParameters.ping_status as any);
        }

        if (requestParameters.menu_order !== undefined) {
            formParams.append('menu_order', requestParameters.menu_order as any);
        }

        if (requestParameters.meta !== undefined) {
            formParams.append('meta', requestParameters.meta as any);
        }

        if (requestParameters.template !== undefined) {
            formParams.append('template', requestParameters.template as any);
        }

        const response = await this.request({
            path: `/wp/v2/pages/{id}/autosaves`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PageRevisionFromJSON(jsonValue));
    }

    /**
     */
    async postWpV2PagesByIdAutosaves(requestParameters: PostWpV2PagesByIdAutosavesRequest): Promise<PageRevision> {
        const response = await this.postWpV2PagesByIdAutosavesRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async postWpV2PostsRaw(requestParameters: PostWpV2PostsRequest): Promise<runtime.ApiResponse<Post>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.date !== undefined) {
            formParams.append('date', requestParameters.date as any);
        }

        if (requestParameters.date_gmt !== undefined) {
            formParams.append('date_gmt', requestParameters.date_gmt as any);
        }

        if (requestParameters.slug !== undefined) {
            formParams.append('slug', requestParameters.slug as any);
        }

        if (requestParameters.status !== undefined) {
            formParams.append('status', requestParameters.status as any);
        }

        if (requestParameters.password !== undefined) {
            formParams.append('password', requestParameters.password as any);
        }

        if (requestParameters.title !== undefined) {
            formParams.append('title', requestParameters.title as any);
        }

        if (requestParameters.content !== undefined) {
            formParams.append('content', requestParameters.content as any);
        }

        if (requestParameters.author !== undefined) {
            formParams.append('author', requestParameters.author as any);
        }

        if (requestParameters.excerpt !== undefined) {
            formParams.append('excerpt', requestParameters.excerpt as any);
        }

        if (requestParameters.featured_media !== undefined) {
            formParams.append('featured_media', requestParameters.featured_media as any);
        }

        if (requestParameters.comment_status !== undefined) {
            formParams.append('comment_status', requestParameters.comment_status as any);
        }

        if (requestParameters.ping_status !== undefined) {
            formParams.append('ping_status', requestParameters.ping_status as any);
        }

        if (requestParameters.format !== undefined) {
            formParams.append('format', requestParameters.format as any);
        }

        if (requestParameters.meta !== undefined) {
            formParams.append('meta', requestParameters.meta as any);
        }

        if (requestParameters.sticky !== undefined) {
            formParams.append('sticky', requestParameters.sticky as any);
        }

        if (requestParameters.template !== undefined) {
            formParams.append('template', requestParameters.template as any);
        }

        if (requestParameters.categories !== undefined) {
            formParams.append('categories', requestParameters.categories as any);
        }

        if (requestParameters.tags !== undefined) {
            formParams.append('tags', requestParameters.tags as any);
        }

        const response = await this.request({
            path: `/wp/v2/posts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PostFromJSON(jsonValue));
    }

    /**
     */
    async postWpV2Posts(requestParameters: PostWpV2PostsRequest): Promise<Post> {
        const response = await this.postWpV2PostsRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async postWpV2PostsByIdRaw(requestParameters: PostWpV2PostsByIdRequest): Promise<runtime.ApiResponse<Post>> {
        if (requestParameters.id2 === null || requestParameters.id2 === undefined) {
            throw new runtime.RequiredError('id2','Required parameter requestParameters.id2 was null or undefined when calling postWpV2PostsById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.id !== undefined) {
            formParams.append('id', requestParameters.id as any);
        }

        if (requestParameters.date !== undefined) {
            formParams.append('date', requestParameters.date as any);
        }

        if (requestParameters.date_gmt !== undefined) {
            formParams.append('date_gmt', requestParameters.date_gmt as any);
        }

        if (requestParameters.slug !== undefined) {
            formParams.append('slug', requestParameters.slug as any);
        }

        if (requestParameters.status !== undefined) {
            formParams.append('status', requestParameters.status as any);
        }

        if (requestParameters.password !== undefined) {
            formParams.append('password', requestParameters.password as any);
        }

        if (requestParameters.title !== undefined) {
            formParams.append('title', requestParameters.title as any);
        }

        if (requestParameters.content !== undefined) {
            formParams.append('content', requestParameters.content as any);
        }

        if (requestParameters.author !== undefined) {
            formParams.append('author', requestParameters.author as any);
        }

        if (requestParameters.excerpt !== undefined) {
            formParams.append('excerpt', requestParameters.excerpt as any);
        }

        if (requestParameters.featured_media !== undefined) {
            formParams.append('featured_media', requestParameters.featured_media as any);
        }

        if (requestParameters.comment_status !== undefined) {
            formParams.append('comment_status', requestParameters.comment_status as any);
        }

        if (requestParameters.ping_status !== undefined) {
            formParams.append('ping_status', requestParameters.ping_status as any);
        }

        if (requestParameters.format !== undefined) {
            formParams.append('format', requestParameters.format as any);
        }

        if (requestParameters.meta !== undefined) {
            formParams.append('meta', requestParameters.meta as any);
        }

        if (requestParameters.sticky !== undefined) {
            formParams.append('sticky', requestParameters.sticky as any);
        }

        if (requestParameters.template !== undefined) {
            formParams.append('template', requestParameters.template as any);
        }

        if (requestParameters.categories !== undefined) {
            formParams.append('categories', requestParameters.categories as any);
        }

        if (requestParameters.tags !== undefined) {
            formParams.append('tags', requestParameters.tags as any);
        }

        const response = await this.request({
            path: `/wp/v2/posts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id2))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PostFromJSON(jsonValue));
    }

    /**
     */
    async postWpV2PostsById(requestParameters: PostWpV2PostsByIdRequest): Promise<Post> {
        const response = await this.postWpV2PostsByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async postWpV2PostsByIdAutosavesRaw(requestParameters: PostWpV2PostsByIdAutosavesRequest): Promise<runtime.ApiResponse<PostRevision>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling postWpV2PostsByIdAutosaves.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.parent !== undefined) {
            formParams.append('parent', requestParameters.parent as any);
        }

        if (requestParameters.date !== undefined) {
            formParams.append('date', requestParameters.date as any);
        }

        if (requestParameters.date_gmt !== undefined) {
            formParams.append('date_gmt', requestParameters.date_gmt as any);
        }

        if (requestParameters.slug !== undefined) {
            formParams.append('slug', requestParameters.slug as any);
        }

        if (requestParameters.status !== undefined) {
            formParams.append('status', requestParameters.status as any);
        }

        if (requestParameters.password !== undefined) {
            formParams.append('password', requestParameters.password as any);
        }

        if (requestParameters.title !== undefined) {
            formParams.append('title', requestParameters.title as any);
        }

        if (requestParameters.content !== undefined) {
            formParams.append('content', requestParameters.content as any);
        }

        if (requestParameters.author !== undefined) {
            formParams.append('author', requestParameters.author as any);
        }

        if (requestParameters.excerpt !== undefined) {
            formParams.append('excerpt', requestParameters.excerpt as any);
        }

        if (requestParameters.featured_media !== undefined) {
            formParams.append('featured_media', requestParameters.featured_media as any);
        }

        if (requestParameters.comment_status !== undefined) {
            formParams.append('comment_status', requestParameters.comment_status as any);
        }

        if (requestParameters.ping_status !== undefined) {
            formParams.append('ping_status', requestParameters.ping_status as any);
        }

        if (requestParameters.format !== undefined) {
            formParams.append('format', requestParameters.format as any);
        }

        if (requestParameters.meta !== undefined) {
            formParams.append('meta', requestParameters.meta as any);
        }

        if (requestParameters.sticky !== undefined) {
            formParams.append('sticky', requestParameters.sticky as any);
        }

        if (requestParameters.template !== undefined) {
            formParams.append('template', requestParameters.template as any);
        }

        if (requestParameters.categories !== undefined) {
            formParams.append('categories', requestParameters.categories as any);
        }

        if (requestParameters.tags !== undefined) {
            formParams.append('tags', requestParameters.tags as any);
        }

        const response = await this.request({
            path: `/wp/v2/posts/{id}/autosaves`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PostRevisionFromJSON(jsonValue));
    }

    /**
     */
    async postWpV2PostsByIdAutosaves(requestParameters: PostWpV2PostsByIdAutosavesRequest): Promise<PostRevision> {
        const response = await this.postWpV2PostsByIdAutosavesRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async postWpV2SettingsRaw(requestParameters: PostWpV2SettingsRequest): Promise<runtime.ApiResponse<Settings>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.title !== undefined) {
            formParams.append('title', requestParameters.title as any);
        }

        if (requestParameters.description !== undefined) {
            formParams.append('description', requestParameters.description as any);
        }

        if (requestParameters.url !== undefined) {
            formParams.append('url', requestParameters.url as any);
        }

        if (requestParameters.email !== undefined) {
            formParams.append('email', requestParameters.email as any);
        }

        if (requestParameters.timezone !== undefined) {
            formParams.append('timezone', requestParameters.timezone as any);
        }

        if (requestParameters.date_format !== undefined) {
            formParams.append('date_format', requestParameters.date_format as any);
        }

        if (requestParameters.time_format !== undefined) {
            formParams.append('time_format', requestParameters.time_format as any);
        }

        if (requestParameters.start_of_week !== undefined) {
            formParams.append('start_of_week', requestParameters.start_of_week as any);
        }

        if (requestParameters.language !== undefined) {
            formParams.append('language', requestParameters.language as any);
        }

        if (requestParameters.use_smilies !== undefined) {
            formParams.append('use_smilies', requestParameters.use_smilies as any);
        }

        if (requestParameters.default_category !== undefined) {
            formParams.append('default_category', requestParameters.default_category as any);
        }

        if (requestParameters.default_post_format !== undefined) {
            formParams.append('default_post_format', requestParameters.default_post_format as any);
        }

        if (requestParameters.posts_per_page !== undefined) {
            formParams.append('posts_per_page', requestParameters.posts_per_page as any);
        }

        if (requestParameters.default_ping_status !== undefined) {
            formParams.append('default_ping_status', requestParameters.default_ping_status as any);
        }

        if (requestParameters.default_comment_status !== undefined) {
            formParams.append('default_comment_status', requestParameters.default_comment_status as any);
        }

        const response = await this.request({
            path: `/wp/v2/settings`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SettingsFromJSON(jsonValue));
    }

    /**
     */
    async postWpV2Settings(requestParameters: PostWpV2SettingsRequest): Promise<Settings> {
        const response = await this.postWpV2SettingsRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async postWpV2TagsRaw(requestParameters: PostWpV2TagsRequest): Promise<runtime.ApiResponse<Tag>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling postWpV2Tags.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.description !== undefined) {
            formParams.append('description', requestParameters.description as any);
        }

        if (requestParameters.name !== undefined) {
            formParams.append('name', requestParameters.name as any);
        }

        if (requestParameters.slug !== undefined) {
            formParams.append('slug', requestParameters.slug as any);
        }

        if (requestParameters.meta !== undefined) {
            formParams.append('meta', requestParameters.meta as any);
        }

        const response = await this.request({
            path: `/wp/v2/tags`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TagFromJSON(jsonValue));
    }

    /**
     */
    async postWpV2Tags(requestParameters: PostWpV2TagsRequest): Promise<Tag> {
        const response = await this.postWpV2TagsRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async postWpV2TagsByIdRaw(requestParameters: PostWpV2TagsByIdRequest): Promise<runtime.ApiResponse<Tag>> {
        if (requestParameters.id2 === null || requestParameters.id2 === undefined) {
            throw new runtime.RequiredError('id2','Required parameter requestParameters.id2 was null or undefined when calling postWpV2TagsById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.id !== undefined) {
            formParams.append('id', requestParameters.id as any);
        }

        if (requestParameters.description !== undefined) {
            formParams.append('description', requestParameters.description as any);
        }

        if (requestParameters.name !== undefined) {
            formParams.append('name', requestParameters.name as any);
        }

        if (requestParameters.slug !== undefined) {
            formParams.append('slug', requestParameters.slug as any);
        }

        if (requestParameters.meta !== undefined) {
            formParams.append('meta', requestParameters.meta as any);
        }

        const response = await this.request({
            path: `/wp/v2/tags/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id2))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TagFromJSON(jsonValue));
    }

    /**
     */
    async postWpV2TagsById(requestParameters: PostWpV2TagsByIdRequest): Promise<Tag> {
        const response = await this.postWpV2TagsByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async postWpV2UsersRaw(requestParameters: PostWpV2UsersRequest): Promise<runtime.ApiResponse<User>> {
        if (requestParameters.username === null || requestParameters.username === undefined) {
            throw new runtime.RequiredError('username','Required parameter requestParameters.username was null or undefined when calling postWpV2Users.');
        }

        if (requestParameters.email === null || requestParameters.email === undefined) {
            throw new runtime.RequiredError('email','Required parameter requestParameters.email was null or undefined when calling postWpV2Users.');
        }

        if (requestParameters.password === null || requestParameters.password === undefined) {
            throw new runtime.RequiredError('password','Required parameter requestParameters.password was null or undefined when calling postWpV2Users.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.username !== undefined) {
            formParams.append('username', requestParameters.username as any);
        }

        if (requestParameters.name !== undefined) {
            formParams.append('name', requestParameters.name as any);
        }

        if (requestParameters.first_name !== undefined) {
            formParams.append('first_name', requestParameters.first_name as any);
        }

        if (requestParameters.last_name !== undefined) {
            formParams.append('last_name', requestParameters.last_name as any);
        }

        if (requestParameters.email !== undefined) {
            formParams.append('email', requestParameters.email as any);
        }

        if (requestParameters.url !== undefined) {
            formParams.append('url', requestParameters.url as any);
        }

        if (requestParameters.description !== undefined) {
            formParams.append('description', requestParameters.description as any);
        }

        if (requestParameters.locale !== undefined) {
            formParams.append('locale', requestParameters.locale as any);
        }

        if (requestParameters.nickname !== undefined) {
            formParams.append('nickname', requestParameters.nickname as any);
        }

        if (requestParameters.slug !== undefined) {
            formParams.append('slug', requestParameters.slug as any);
        }

        if (requestParameters.roles !== undefined) {
            formParams.append('roles', requestParameters.roles as any);
        }

        if (requestParameters.password !== undefined) {
            formParams.append('password', requestParameters.password as any);
        }

        if (requestParameters.meta !== undefined) {
            formParams.append('meta', requestParameters.meta as any);
        }

        const response = await this.request({
            path: `/wp/v2/users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     */
    async postWpV2Users(requestParameters: PostWpV2UsersRequest): Promise<User> {
        const response = await this.postWpV2UsersRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async postWpV2UsersByIdRaw(requestParameters: PostWpV2UsersByIdRequest): Promise<runtime.ApiResponse<User>> {
        if (requestParameters.id2 === null || requestParameters.id2 === undefined) {
            throw new runtime.RequiredError('id2','Required parameter requestParameters.id2 was null or undefined when calling postWpV2UsersById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.id !== undefined) {
            formParams.append('id', requestParameters.id as any);
        }

        if (requestParameters.username !== undefined) {
            formParams.append('username', requestParameters.username as any);
        }

        if (requestParameters.name !== undefined) {
            formParams.append('name', requestParameters.name as any);
        }

        if (requestParameters.first_name !== undefined) {
            formParams.append('first_name', requestParameters.first_name as any);
        }

        if (requestParameters.last_name !== undefined) {
            formParams.append('last_name', requestParameters.last_name as any);
        }

        if (requestParameters.email !== undefined) {
            formParams.append('email', requestParameters.email as any);
        }

        if (requestParameters.url !== undefined) {
            formParams.append('url', requestParameters.url as any);
        }

        if (requestParameters.description !== undefined) {
            formParams.append('description', requestParameters.description as any);
        }

        if (requestParameters.locale !== undefined) {
            formParams.append('locale', requestParameters.locale as any);
        }

        if (requestParameters.nickname !== undefined) {
            formParams.append('nickname', requestParameters.nickname as any);
        }

        if (requestParameters.slug !== undefined) {
            formParams.append('slug', requestParameters.slug as any);
        }

        if (requestParameters.roles !== undefined) {
            formParams.append('roles', requestParameters.roles as any);
        }

        if (requestParameters.password !== undefined) {
            formParams.append('password', requestParameters.password as any);
        }

        if (requestParameters.meta !== undefined) {
            formParams.append('meta', requestParameters.meta as any);
        }

        const response = await this.request({
            path: `/wp/v2/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id2))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     */
    async postWpV2UsersById(requestParameters: PostWpV2UsersByIdRequest): Promise<User> {
        const response = await this.postWpV2UsersByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async postWpV2UsersMeRaw(requestParameters: PostWpV2UsersMeRequest): Promise<runtime.ApiResponse<User>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.username !== undefined) {
            formParams.append('username', requestParameters.username as any);
        }

        if (requestParameters.name !== undefined) {
            formParams.append('name', requestParameters.name as any);
        }

        if (requestParameters.first_name !== undefined) {
            formParams.append('first_name', requestParameters.first_name as any);
        }

        if (requestParameters.last_name !== undefined) {
            formParams.append('last_name', requestParameters.last_name as any);
        }

        if (requestParameters.email !== undefined) {
            formParams.append('email', requestParameters.email as any);
        }

        if (requestParameters.url !== undefined) {
            formParams.append('url', requestParameters.url as any);
        }

        if (requestParameters.description !== undefined) {
            formParams.append('description', requestParameters.description as any);
        }

        if (requestParameters.locale !== undefined) {
            formParams.append('locale', requestParameters.locale as any);
        }

        if (requestParameters.nickname !== undefined) {
            formParams.append('nickname', requestParameters.nickname as any);
        }

        if (requestParameters.slug !== undefined) {
            formParams.append('slug', requestParameters.slug as any);
        }

        if (requestParameters.roles !== undefined) {
            formParams.append('roles', requestParameters.roles as any);
        }

        if (requestParameters.password !== undefined) {
            formParams.append('password', requestParameters.password as any);
        }

        if (requestParameters.meta !== undefined) {
            formParams.append('meta', requestParameters.meta as any);
        }

        const response = await this.request({
            path: `/wp/v2/users/me`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     */
    async postWpV2UsersMe(requestParameters: PostWpV2UsersMeRequest): Promise<User> {
        const response = await this.postWpV2UsersMeRaw(requestParameters);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum GetWpV2BlockRendererByNameContextEnum {
    Edit = 'edit',
    View = 'view'
}
/**
    * @export
    * @enum {string}
    */
export enum GetWpV2BlocksContextEnum {
    View = 'view',
    Embed = 'embed',
    Edit = 'edit'
}
/**
    * @export
    * @enum {string}
    */
export enum GetWpV2BlocksOrderEnum {
    Asc = 'asc',
    Desc = 'desc'
}
/**
    * @export
    * @enum {string}
    */
export enum GetWpV2BlocksOrderbyEnum {
    Author = 'author',
    Date = 'date',
    Id = 'id',
    Include = 'include',
    Modified = 'modified',
    Parent = 'parent',
    Relevance = 'relevance',
    Slug = 'slug',
    IncludeSlugs = 'include_slugs',
    Title = 'title'
}
/**
    * @export
    * @enum {string}
    */
export enum GetWpV2BlocksByIdContextEnum {
    View = 'view',
    Embed = 'embed',
    Edit = 'edit'
}
/**
    * @export
    * @enum {string}
    */
export enum GetWpV2BlocksByIdAutosavesContextEnum {
    View = 'view',
    Embed = 'embed',
    Edit = 'edit'
}
/**
    * @export
    * @enum {string}
    */
export enum GetWpV2BlocksByParentAutosavesByIdContextEnum {
    View = 'view',
    Embed = 'embed',
    Edit = 'edit'
}
/**
    * @export
    * @enum {string}
    */
export enum GetWpV2CategoriesContextEnum {
    View = 'view',
    Embed = 'embed',
    Edit = 'edit'
}
/**
    * @export
    * @enum {string}
    */
export enum GetWpV2CategoriesOrderEnum {
    Asc = 'asc',
    Desc = 'desc'
}
/**
    * @export
    * @enum {string}
    */
export enum GetWpV2CategoriesOrderbyEnum {
    Id = 'id',
    Include = 'include',
    Name = 'name',
    Slug = 'slug',
    IncludeSlugs = 'include_slugs',
    TermGroup = 'term_group',
    Description = 'description',
    Count = 'count'
}
/**
    * @export
    * @enum {string}
    */
export enum GetWpV2CategoriesByIdContextEnum {
    View = 'view',
    Embed = 'embed',
    Edit = 'edit'
}
/**
    * @export
    * @enum {string}
    */
export enum GetWpV2CommentsContextEnum {
    View = 'view',
    Embed = 'embed',
    Edit = 'edit'
}
/**
    * @export
    * @enum {string}
    */
export enum GetWpV2CommentsOrderEnum {
    Asc = 'asc',
    Desc = 'desc'
}
/**
    * @export
    * @enum {string}
    */
export enum GetWpV2CommentsOrderbyEnum {
    Date = 'date',
    DateGmt = 'date_gmt',
    Id = 'id',
    Include = 'include',
    Post = 'post',
    Parent = 'parent',
    Type = 'type'
}
/**
    * @export
    * @enum {string}
    */
export enum GetWpV2CommentsByIdContextEnum {
    View = 'view',
    Embed = 'embed',
    Edit = 'edit'
}
/**
    * @export
    * @enum {string}
    */
export enum GetWpV2MediaContextEnum {
    View = 'view',
    Embed = 'embed',
    Edit = 'edit'
}
/**
    * @export
    * @enum {string}
    */
export enum GetWpV2MediaOrderEnum {
    Asc = 'asc',
    Desc = 'desc'
}
/**
    * @export
    * @enum {string}
    */
export enum GetWpV2MediaOrderbyEnum {
    Author = 'author',
    Date = 'date',
    Id = 'id',
    Include = 'include',
    Modified = 'modified',
    Parent = 'parent',
    Relevance = 'relevance',
    Slug = 'slug',
    IncludeSlugs = 'include_slugs',
    Title = 'title'
}
/**
    * @export
    * @enum {string}
    */
export enum GetWpV2MediaMediaTypeEnum {
    Image = 'image',
    Video = 'video',
    Text = 'text',
    Application = 'application',
    Audio = 'audio'
}
/**
    * @export
    * @enum {string}
    */
export enum GetWpV2MediaByIdContextEnum {
    View = 'view',
    Embed = 'embed',
    Edit = 'edit'
}
/**
    * @export
    * @enum {string}
    */
export enum GetWpV2PagesContextEnum {
    View = 'view',
    Embed = 'embed',
    Edit = 'edit'
}
/**
    * @export
    * @enum {string}
    */
export enum GetWpV2PagesOrderEnum {
    Asc = 'asc',
    Desc = 'desc'
}
/**
    * @export
    * @enum {string}
    */
export enum GetWpV2PagesOrderbyEnum {
    Author = 'author',
    Date = 'date',
    Id = 'id',
    Include = 'include',
    Modified = 'modified',
    Parent = 'parent',
    Relevance = 'relevance',
    Slug = 'slug',
    IncludeSlugs = 'include_slugs',
    Title = 'title',
    MenuOrder = 'menu_order'
}
/**
    * @export
    * @enum {string}
    */
export enum GetWpV2PagesByIdContextEnum {
    View = 'view',
    Embed = 'embed',
    Edit = 'edit'
}
/**
    * @export
    * @enum {string}
    */
export enum GetWpV2PagesByIdAutosavesContextEnum {
    View = 'view',
    Embed = 'embed',
    Edit = 'edit'
}
/**
    * @export
    * @enum {string}
    */
export enum GetWpV2PagesByParentAutosavesByIdContextEnum {
    View = 'view',
    Embed = 'embed',
    Edit = 'edit'
}
/**
    * @export
    * @enum {string}
    */
export enum GetWpV2PagesByParentRevisionsContextEnum {
    View = 'view',
    Embed = 'embed',
    Edit = 'edit'
}
/**
    * @export
    * @enum {string}
    */
export enum GetWpV2PagesByParentRevisionsOrderEnum {
    Asc = 'asc',
    Desc = 'desc'
}
/**
    * @export
    * @enum {string}
    */
export enum GetWpV2PagesByParentRevisionsOrderbyEnum {
    Date = 'date',
    Id = 'id',
    Include = 'include',
    Relevance = 'relevance',
    Slug = 'slug',
    IncludeSlugs = 'include_slugs',
    Title = 'title'
}
/**
    * @export
    * @enum {string}
    */
export enum GetWpV2PagesByParentRevisionsByIdContextEnum {
    View = 'view',
    Embed = 'embed',
    Edit = 'edit'
}
/**
    * @export
    * @enum {string}
    */
export enum GetWpV2PostsContextEnum {
    View = 'view',
    Embed = 'embed',
    Edit = 'edit'
}
/**
    * @export
    * @enum {string}
    */
export enum GetWpV2PostsOrderEnum {
    Asc = 'asc',
    Desc = 'desc'
}
/**
    * @export
    * @enum {string}
    */
export enum GetWpV2PostsOrderbyEnum {
    Author = 'author',
    Date = 'date',
    Id = 'id',
    Include = 'include',
    Modified = 'modified',
    Parent = 'parent',
    Relevance = 'relevance',
    Slug = 'slug',
    IncludeSlugs = 'include_slugs',
    Title = 'title'
}
/**
    * @export
    * @enum {string}
    */
export enum GetWpV2PostsByIdContextEnum {
    View = 'view',
    Embed = 'embed',
    Edit = 'edit'
}
/**
    * @export
    * @enum {string}
    */
export enum GetWpV2PostsByIdAutosavesContextEnum {
    View = 'view',
    Embed = 'embed',
    Edit = 'edit'
}
/**
    * @export
    * @enum {string}
    */
export enum GetWpV2PostsByParentAutosavesByIdContextEnum {
    View = 'view',
    Embed = 'embed',
    Edit = 'edit'
}
/**
    * @export
    * @enum {string}
    */
export enum GetWpV2PostsByParentRevisionsContextEnum {
    View = 'view',
    Embed = 'embed',
    Edit = 'edit'
}
/**
    * @export
    * @enum {string}
    */
export enum GetWpV2PostsByParentRevisionsOrderEnum {
    Asc = 'asc',
    Desc = 'desc'
}
/**
    * @export
    * @enum {string}
    */
export enum GetWpV2PostsByParentRevisionsOrderbyEnum {
    Date = 'date',
    Id = 'id',
    Include = 'include',
    Relevance = 'relevance',
    Slug = 'slug',
    IncludeSlugs = 'include_slugs',
    Title = 'title'
}
/**
    * @export
    * @enum {string}
    */
export enum GetWpV2PostsByParentRevisionsByIdContextEnum {
    View = 'view',
    Embed = 'embed',
    Edit = 'edit'
}
/**
    * @export
    * @enum {string}
    */
export enum GetWpV2SearchContextEnum {
    View = 'view',
    Embed = 'embed'
}
/**
    * @export
    * @enum {string}
    */
export enum GetWpV2SearchTypeEnum {
    Post = 'post'
}
/**
    * @export
    * @enum {string}
    */
export enum GetWpV2StatusesContextEnum {
    View = 'view',
    Embed = 'embed',
    Edit = 'edit'
}
/**
    * @export
    * @enum {string}
    */
export enum GetWpV2StatusesByStatusContextEnum {
    View = 'view',
    Embed = 'embed',
    Edit = 'edit'
}
/**
    * @export
    * @enum {string}
    */
export enum GetWpV2TagsContextEnum {
    View = 'view',
    Embed = 'embed',
    Edit = 'edit'
}
/**
    * @export
    * @enum {string}
    */
export enum GetWpV2TagsOrderEnum {
    Asc = 'asc',
    Desc = 'desc'
}
/**
    * @export
    * @enum {string}
    */
export enum GetWpV2TagsOrderbyEnum {
    Id = 'id',
    Include = 'include',
    Name = 'name',
    Slug = 'slug',
    IncludeSlugs = 'include_slugs',
    TermGroup = 'term_group',
    Description = 'description',
    Count = 'count'
}
/**
    * @export
    * @enum {string}
    */
export enum GetWpV2TagsByIdContextEnum {
    View = 'view',
    Embed = 'embed',
    Edit = 'edit'
}
/**
    * @export
    * @enum {string}
    */
export enum GetWpV2TaxonomiesContextEnum {
    View = 'view',
    Embed = 'embed',
    Edit = 'edit'
}
/**
    * @export
    * @enum {string}
    */
export enum GetWpV2TaxonomiesByTaxonomyContextEnum {
    View = 'view',
    Embed = 'embed',
    Edit = 'edit'
}
/**
    * @export
    * @enum {string}
    */
export enum GetWpV2TypesContextEnum {
    View = 'view',
    Embed = 'embed',
    Edit = 'edit'
}
/**
    * @export
    * @enum {string}
    */
export enum GetWpV2TypesByTypeContextEnum {
    View = 'view',
    Embed = 'embed',
    Edit = 'edit'
}
/**
    * @export
    * @enum {string}
    */
export enum GetWpV2UsersContextEnum {
    View = 'view',
    Embed = 'embed',
    Edit = 'edit'
}
/**
    * @export
    * @enum {string}
    */
export enum GetWpV2UsersOrderEnum {
    Asc = 'asc',
    Desc = 'desc'
}
/**
    * @export
    * @enum {string}
    */
export enum GetWpV2UsersOrderbyEnum {
    Id = 'id',
    Include = 'include',
    Name = 'name',
    RegisteredDate = 'registered_date',
    Slug = 'slug',
    IncludeSlugs = 'include_slugs',
    Email = 'email',
    Url = 'url'
}
/**
    * @export
    * @enum {string}
    */
export enum GetWpV2UsersWhoEnum {
    Authors = 'authors'
}
/**
    * @export
    * @enum {string}
    */
export enum GetWpV2UsersByIdContextEnum {
    View = 'view',
    Embed = 'embed',
    Edit = 'edit'
}
/**
    * @export
    * @enum {string}
    */
export enum GetWpV2UsersMeContextEnum {
    View = 'view',
    Embed = 'embed',
    Edit = 'edit'
}
/**
    * @export
    * @enum {string}
    */
export enum PostWpV2BlocksStatusEnum {
    Publish = 'publish',
    Future = 'future',
    Draft = 'draft',
    Pending = 'pending',
    Private = 'private'
}
/**
    * @export
    * @enum {string}
    */
export enum PostWpV2BlocksByIdStatusEnum {
    Publish = 'publish',
    Future = 'future',
    Draft = 'draft',
    Pending = 'pending',
    Private = 'private'
}
/**
    * @export
    * @enum {string}
    */
export enum PostWpV2BlocksByIdAutosavesStatusEnum {
    Publish = 'publish',
    Future = 'future',
    Draft = 'draft',
    Pending = 'pending',
    Private = 'private'
}
/**
    * @export
    * @enum {string}
    */
export enum PostWpV2MediaStatusEnum {
    Publish = 'publish',
    Future = 'future',
    Draft = 'draft',
    Pending = 'pending',
    Private = 'private'
}
/**
    * @export
    * @enum {string}
    */
export enum PostWpV2MediaCommentStatusEnum {
    Open = 'open',
    Closed = 'closed'
}
/**
    * @export
    * @enum {string}
    */
export enum PostWpV2MediaPingStatusEnum {
    Open = 'open',
    Closed = 'closed'
}
/**
    * @export
    * @enum {string}
    */
export enum PostWpV2MediaByIdStatusEnum {
    Publish = 'publish',
    Future = 'future',
    Draft = 'draft',
    Pending = 'pending',
    Private = 'private'
}
/**
    * @export
    * @enum {string}
    */
export enum PostWpV2MediaByIdCommentStatusEnum {
    Open = 'open',
    Closed = 'closed'
}
/**
    * @export
    * @enum {string}
    */
export enum PostWpV2MediaByIdPingStatusEnum {
    Open = 'open',
    Closed = 'closed'
}
/**
    * @export
    * @enum {string}
    */
export enum PostWpV2PagesStatusEnum {
    Publish = 'publish',
    Future = 'future',
    Draft = 'draft',
    Pending = 'pending',
    Private = 'private'
}
/**
    * @export
    * @enum {string}
    */
export enum PostWpV2PagesCommentStatusEnum {
    Open = 'open',
    Closed = 'closed'
}
/**
    * @export
    * @enum {string}
    */
export enum PostWpV2PagesPingStatusEnum {
    Open = 'open',
    Closed = 'closed'
}
/**
    * @export
    * @enum {string}
    */
export enum PostWpV2PagesByIdStatusEnum {
    Publish = 'publish',
    Future = 'future',
    Draft = 'draft',
    Pending = 'pending',
    Private = 'private'
}
/**
    * @export
    * @enum {string}
    */
export enum PostWpV2PagesByIdCommentStatusEnum {
    Open = 'open',
    Closed = 'closed'
}
/**
    * @export
    * @enum {string}
    */
export enum PostWpV2PagesByIdPingStatusEnum {
    Open = 'open',
    Closed = 'closed'
}
/**
    * @export
    * @enum {string}
    */
export enum PostWpV2PagesByIdAutosavesStatusEnum {
    Publish = 'publish',
    Future = 'future',
    Draft = 'draft',
    Pending = 'pending',
    Private = 'private'
}
/**
    * @export
    * @enum {string}
    */
export enum PostWpV2PagesByIdAutosavesCommentStatusEnum {
    Open = 'open',
    Closed = 'closed'
}
/**
    * @export
    * @enum {string}
    */
export enum PostWpV2PagesByIdAutosavesPingStatusEnum {
    Open = 'open',
    Closed = 'closed'
}
/**
    * @export
    * @enum {string}
    */
export enum PostWpV2PostsStatusEnum {
    Publish = 'publish',
    Future = 'future',
    Draft = 'draft',
    Pending = 'pending',
    Private = 'private'
}
/**
    * @export
    * @enum {string}
    */
export enum PostWpV2PostsCommentStatusEnum {
    Open = 'open',
    Closed = 'closed'
}
/**
    * @export
    * @enum {string}
    */
export enum PostWpV2PostsPingStatusEnum {
    Open = 'open',
    Closed = 'closed'
}
/**
    * @export
    * @enum {string}
    */
export enum PostWpV2PostsFormatEnum {
    Standard = 'standard',
    Aside = 'aside',
    Chat = 'chat',
    Gallery = 'gallery',
    Link = 'link',
    Image = 'image',
    Quote = 'quote',
    Status = 'status',
    Video = 'video',
    Audio = 'audio'
}
/**
    * @export
    * @enum {string}
    */
export enum PostWpV2PostsByIdStatusEnum {
    Publish = 'publish',
    Future = 'future',
    Draft = 'draft',
    Pending = 'pending',
    Private = 'private'
}
/**
    * @export
    * @enum {string}
    */
export enum PostWpV2PostsByIdCommentStatusEnum {
    Open = 'open',
    Closed = 'closed'
}
/**
    * @export
    * @enum {string}
    */
export enum PostWpV2PostsByIdPingStatusEnum {
    Open = 'open',
    Closed = 'closed'
}
/**
    * @export
    * @enum {string}
    */
export enum PostWpV2PostsByIdFormatEnum {
    Standard = 'standard',
    Aside = 'aside',
    Chat = 'chat',
    Gallery = 'gallery',
    Link = 'link',
    Image = 'image',
    Quote = 'quote',
    Status = 'status',
    Video = 'video',
    Audio = 'audio'
}
/**
    * @export
    * @enum {string}
    */
export enum PostWpV2PostsByIdAutosavesStatusEnum {
    Publish = 'publish',
    Future = 'future',
    Draft = 'draft',
    Pending = 'pending',
    Private = 'private'
}
/**
    * @export
    * @enum {string}
    */
export enum PostWpV2PostsByIdAutosavesCommentStatusEnum {
    Open = 'open',
    Closed = 'closed'
}
/**
    * @export
    * @enum {string}
    */
export enum PostWpV2PostsByIdAutosavesPingStatusEnum {
    Open = 'open',
    Closed = 'closed'
}
/**
    * @export
    * @enum {string}
    */
export enum PostWpV2PostsByIdAutosavesFormatEnum {
    Standard = 'standard',
    Aside = 'aside',
    Chat = 'chat',
    Gallery = 'gallery',
    Link = 'link',
    Image = 'image',
    Quote = 'quote',
    Status = 'status',
    Video = 'video',
    Audio = 'audio'
}
/**
    * @export
    * @enum {string}
    */
export enum PostWpV2SettingsDefaultPingStatusEnum {
    Open = 'open',
    Closed = 'closed'
}
/**
    * @export
    * @enum {string}
    */
export enum PostWpV2SettingsDefaultCommentStatusEnum {
    Open = 'open',
    Closed = 'closed'
}
/**
    * @export
    * @enum {string}
    */
export enum PostWpV2UsersLocaleEnum {
    Empty = '',
    EnUS = 'en_US'
}
/**
    * @export
    * @enum {string}
    */
export enum PostWpV2UsersByIdLocaleEnum {
    Empty = '',
    EnUS = 'en_US'
}
/**
    * @export
    * @enum {string}
    */
export enum PostWpV2UsersMeLocaleEnum {
    Empty = '',
    EnUS = 'en_US'
}
