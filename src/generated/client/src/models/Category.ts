// tslint:disable
/**
 * localhost:1234
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Category
 */
export interface Category {
    /**
     * Unique identifier for the term.
     * @type {number}
     * @memberof Category
     */
    id?: number;
    /**
     * Number of published posts for the term.
     * @type {number}
     * @memberof Category
     */
    count?: number;
    /**
     * HTML description of the term.
     * @type {string}
     * @memberof Category
     */
    description?: string;
    /**
     * URL of the term.
     * @type {string}
     * @memberof Category
     */
    link?: string;
    /**
     * HTML title for the term.
     * @type {string}
     * @memberof Category
     */
    name?: string;
    /**
     * An alphanumeric identifier for the term unique to its type.
     * @type {string}
     * @memberof Category
     */
    slug?: string;
    /**
     * Type attribution for the term.
     * @type {string}
     * @memberof Category
     */
    taxonomy?: CategoryTaxonomyEnum;
    /**
     * The parent term ID.
     * @type {number}
     * @memberof Category
     */
    parent?: number;
    /**
     * Meta fields.
     * @type {object}
     * @memberof Category
     */
    meta?: object;
}

export function CategoryFromJSON(json: any): Category {
    return CategoryFromJSONTyped(json, false);
}

export function CategoryFromJSONTyped(json: any, ignoreDiscriminator: boolean): Category {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'count': !exists(json, 'count') ? undefined : json['count'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'link': !exists(json, 'link') ? undefined : json['link'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'slug': !exists(json, 'slug') ? undefined : json['slug'],
        'taxonomy': !exists(json, 'taxonomy') ? undefined : json['taxonomy'],
        'parent': !exists(json, 'parent') ? undefined : json['parent'],
        'meta': !exists(json, 'meta') ? undefined : json['meta'],
    };
}

export function CategoryToJSON(value?: Category | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'count': value.count,
        'description': value.description,
        'link': value.link,
        'name': value.name,
        'slug': value.slug,
        'taxonomy': value.taxonomy,
        'parent': value.parent,
        'meta': value.meta,
    };
}

/**
* @export
* @enum {string}
*/
export enum CategoryTaxonomyEnum {
    Category = 'category',
    PostTag = 'post_tag',
    NavMenu = 'nav_menu',
    LinkCategory = 'link_category',
    PostFormat = 'post_format'
}


