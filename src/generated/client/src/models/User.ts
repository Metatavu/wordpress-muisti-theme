// tslint:disable
/**
 * localhost:1234
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    UserAvatarUrls,
    UserAvatarUrlsFromJSON,
    UserAvatarUrlsFromJSONTyped,
    UserAvatarUrlsToJSON,
} from './';

/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * Unique identifier for the user.
     * @type {number}
     * @memberof User
     */
    id?: number;
    /**
     * Login name for the user.
     * @type {string}
     * @memberof User
     */
    username?: string;
    /**
     * Display name for the user.
     * @type {string}
     * @memberof User
     */
    name?: string;
    /**
     * First name for the user.
     * @type {string}
     * @memberof User
     */
    first_name?: string;
    /**
     * Last name for the user.
     * @type {string}
     * @memberof User
     */
    last_name?: string;
    /**
     * The email address for the user.
     * @type {string}
     * @memberof User
     */
    email?: string;
    /**
     * URL of the user.
     * @type {string}
     * @memberof User
     */
    url?: string;
    /**
     * Description of the user.
     * @type {string}
     * @memberof User
     */
    description?: string;
    /**
     * Author URL of the user.
     * @type {string}
     * @memberof User
     */
    link?: string;
    /**
     * Locale for the user.
     * @type {string}
     * @memberof User
     */
    locale?: UserLocaleEnum;
    /**
     * The nickname for the user.
     * @type {string}
     * @memberof User
     */
    nickname?: string;
    /**
     * An alphanumeric identifier for the user.
     * @type {string}
     * @memberof User
     */
    slug?: string;
    /**
     * Registration date for the user.
     * @type {Date}
     * @memberof User
     */
    registered_date?: Date;
    /**
     * Roles assigned to the user.
     * @type {Array<string>}
     * @memberof User
     */
    roles?: Array<string>;
    /**
     * Password for the user (never included).
     * @type {string}
     * @memberof User
     */
    password?: string;
    /**
     * All capabilities assigned to the user.
     * @type {object}
     * @memberof User
     */
    capabilities?: object;
    /**
     * Any extra capabilities assigned to the user.
     * @type {object}
     * @memberof User
     */
    extra_capabilities?: object;
    /**
     * 
     * @type {UserAvatarUrls}
     * @memberof User
     */
    avatar_urls?: UserAvatarUrls;
    /**
     * Meta fields.
     * @type {object}
     * @memberof User
     */
    meta?: object;
}

export function UserFromJSON(json: any): User {
    return UserFromJSONTyped(json, false);
}

export function UserFromJSONTyped(json: any, ignoreDiscriminator: boolean): User {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'username': !exists(json, 'username') ? undefined : json['username'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'first_name': !exists(json, 'first_name') ? undefined : json['first_name'],
        'last_name': !exists(json, 'last_name') ? undefined : json['last_name'],
        'email': !exists(json, 'email') ? undefined : json['email'],
        'url': !exists(json, 'url') ? undefined : json['url'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'link': !exists(json, 'link') ? undefined : json['link'],
        'locale': !exists(json, 'locale') ? undefined : json['locale'],
        'nickname': !exists(json, 'nickname') ? undefined : json['nickname'],
        'slug': !exists(json, 'slug') ? undefined : json['slug'],
        'registered_date': !exists(json, 'registered_date') ? undefined : new Date(json['registered_date']),
        'roles': !exists(json, 'roles') ? undefined : json['roles'],
        'password': !exists(json, 'password') ? undefined : json['password'],
        'capabilities': !exists(json, 'capabilities') ? undefined : json['capabilities'],
        'extra_capabilities': !exists(json, 'extra_capabilities') ? undefined : json['extra_capabilities'],
        'avatar_urls': !exists(json, 'avatar_urls') ? undefined : UserAvatarUrlsFromJSON(json['avatar_urls']),
        'meta': !exists(json, 'meta') ? undefined : json['meta'],
    };
}

export function UserToJSON(value?: User | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'username': value.username,
        'name': value.name,
        'first_name': value.first_name,
        'last_name': value.last_name,
        'email': value.email,
        'url': value.url,
        'description': value.description,
        'link': value.link,
        'locale': value.locale,
        'nickname': value.nickname,
        'slug': value.slug,
        'registered_date': value.registered_date == null ? undefined : value.registered_date.toISOString(),
        'roles': value.roles,
        'password': value.password,
        'capabilities': value.capabilities,
        'extra_capabilities': value.extra_capabilities,
        'avatar_urls': UserAvatarUrlsToJSON(value.avatar_urls),
        'meta': value.meta,
    };
}

/**
* @export
* @enum {string}
*/
export enum UserLocaleEnum {
    EnUS = 'en_US'
}


