// tslint:disable
/**
 * localhost:1234
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    PostContent,
    PostContentFromJSON,
    PostContentFromJSONTyped,
    PostContentToJSON,
    PostExcerpt,
    PostExcerptFromJSON,
    PostExcerptFromJSONTyped,
    PostExcerptToJSON,
    PostGuid,
    PostGuidFromJSON,
    PostGuidFromJSONTyped,
    PostGuidToJSON,
    PostTitle,
    PostTitleFromJSON,
    PostTitleFromJSONTyped,
    PostTitleToJSON,
} from './';

/**
 * 
 * @export
 * @interface Page
 */
export interface Page {
    /**
     * The date the object was published, in the site\'s timezone.
     * @type {Date}
     * @memberof Page
     */
    date?: Date;
    /**
     * The date the object was published, as GMT.
     * @type {Date}
     * @memberof Page
     */
    date_gmt?: Date;
    /**
     * 
     * @type {PostGuid}
     * @memberof Page
     */
    guid?: PostGuid;
    /**
     * Unique identifier for the object.
     * @type {number}
     * @memberof Page
     */
    id?: number;
    /**
     * URL to the object.
     * @type {string}
     * @memberof Page
     */
    link?: string;
    /**
     * The date the object was last modified, in the site\'s timezone.
     * @type {Date}
     * @memberof Page
     */
    modified?: Date;
    /**
     * The date the object was last modified, as GMT.
     * @type {Date}
     * @memberof Page
     */
    modified_gmt?: Date;
    /**
     * An alphanumeric identifier for the object unique to its type.
     * @type {string}
     * @memberof Page
     */
    slug?: string;
    /**
     * A named status for the object.
     * @type {string}
     * @memberof Page
     */
    status?: PageStatusEnum;
    /**
     * Type of Post for the object.
     * @type {string}
     * @memberof Page
     */
    type?: string;
    /**
     * A password to protect access to the content and excerpt.
     * @type {string}
     * @memberof Page
     */
    password?: string;
    /**
     * Permalink template for the object.
     * @type {string}
     * @memberof Page
     */
    permalink_template?: string;
    /**
     * Slug automatically generated from the object title.
     * @type {string}
     * @memberof Page
     */
    generated_slug?: string;
    /**
     * The ID for the parent of the object.
     * @type {number}
     * @memberof Page
     */
    parent?: number;
    /**
     * 
     * @type {PostTitle}
     * @memberof Page
     */
    title?: PostTitle;
    /**
     * 
     * @type {PostContent}
     * @memberof Page
     */
    content?: PostContent;
    /**
     * The ID for the author of the object.
     * @type {number}
     * @memberof Page
     */
    author?: number;
    /**
     * 
     * @type {PostExcerpt}
     * @memberof Page
     */
    excerpt?: PostExcerpt;
    /**
     * The ID of the featured media for the object.
     * @type {number}
     * @memberof Page
     */
    featured_media?: number;
    /**
     * Whether or not comments are open on the object.
     * @type {string}
     * @memberof Page
     */
    comment_status?: PageCommentStatusEnum;
    /**
     * Whether or not the object can be pinged.
     * @type {string}
     * @memberof Page
     */
    ping_status?: PagePingStatusEnum;
    /**
     * The order of the object in relation to other object of its type.
     * @type {number}
     * @memberof Page
     */
    menu_order?: number;
    /**
     * Meta fields.
     * @type {object}
     * @memberof Page
     */
    meta?: object;
    /**
     * The theme file to use to display the object.
     * @type {string}
     * @memberof Page
     */
    template?: string;
}

export function PageFromJSON(json: any): Page {
    return PageFromJSONTyped(json, false);
}

export function PageFromJSONTyped(json: any, ignoreDiscriminator: boolean): Page {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'date': !exists(json, 'date') ? undefined : new Date(json['date']),
        'date_gmt': !exists(json, 'date_gmt') ? undefined : new Date(json['date_gmt']),
        'guid': !exists(json, 'guid') ? undefined : PostGuidFromJSON(json['guid']),
        'id': !exists(json, 'id') ? undefined : json['id'],
        'link': !exists(json, 'link') ? undefined : json['link'],
        'modified': !exists(json, 'modified') ? undefined : new Date(json['modified']),
        'modified_gmt': !exists(json, 'modified_gmt') ? undefined : new Date(json['modified_gmt']),
        'slug': !exists(json, 'slug') ? undefined : json['slug'],
        'status': !exists(json, 'status') ? undefined : json['status'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'password': !exists(json, 'password') ? undefined : json['password'],
        'permalink_template': !exists(json, 'permalink_template') ? undefined : json['permalink_template'],
        'generated_slug': !exists(json, 'generated_slug') ? undefined : json['generated_slug'],
        'parent': !exists(json, 'parent') ? undefined : json['parent'],
        'title': !exists(json, 'title') ? undefined : PostTitleFromJSON(json['title']),
        'content': !exists(json, 'content') ? undefined : PostContentFromJSON(json['content']),
        'author': !exists(json, 'author') ? undefined : json['author'],
        'excerpt': !exists(json, 'excerpt') ? undefined : PostExcerptFromJSON(json['excerpt']),
        'featured_media': !exists(json, 'featured_media') ? undefined : json['featured_media'],
        'comment_status': !exists(json, 'comment_status') ? undefined : json['comment_status'],
        'ping_status': !exists(json, 'ping_status') ? undefined : json['ping_status'],
        'menu_order': !exists(json, 'menu_order') ? undefined : json['menu_order'],
        'meta': !exists(json, 'meta') ? undefined : json['meta'],
        'template': !exists(json, 'template') ? undefined : json['template'],
    };
}

export function PageToJSON(value?: Page | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'date': value.date == null ? undefined : value.date.toISOString(),
        'date_gmt': value.date_gmt == null ? undefined : value.date_gmt.toISOString(),
        'guid': PostGuidToJSON(value.guid),
        'id': value.id,
        'link': value.link,
        'modified': value.modified == null ? undefined : value.modified.toISOString(),
        'modified_gmt': value.modified_gmt == null ? undefined : value.modified_gmt.toISOString(),
        'slug': value.slug,
        'status': value.status,
        'type': value.type,
        'password': value.password,
        'permalink_template': value.permalink_template,
        'generated_slug': value.generated_slug,
        'parent': value.parent,
        'title': PostTitleToJSON(value.title),
        'content': PostContentToJSON(value.content),
        'author': value.author,
        'excerpt': PostExcerptToJSON(value.excerpt),
        'featured_media': value.featured_media,
        'comment_status': value.comment_status,
        'ping_status': value.ping_status,
        'menu_order': value.menu_order,
        'meta': value.meta,
        'template': value.template,
    };
}

/**
* @export
* @enum {string}
*/
export enum PageStatusEnum {
    Publish = 'publish',
    Future = 'future',
    Draft = 'draft',
    Pending = 'pending',
    Private = 'private'
}
/**
* @export
* @enum {string}
*/
export enum PageCommentStatusEnum {
    Open = 'open',
    Closed = 'closed'
}
/**
* @export
* @enum {string}
*/
export enum PagePingStatusEnum {
    Open = 'open',
    Closed = 'closed'
}


